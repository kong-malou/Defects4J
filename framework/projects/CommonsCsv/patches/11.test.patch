diff --git a/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java b/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java
index e2bff4f..a9a68f9 100644
--- a/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java
+++ b/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java
@@ -21,9 +21,9 @@ import static org.apache.commons.csv.CSVFormat.RFC4180;
 import static org.apache.commons.csv.Constants.CR;
 import static org.apache.commons.csv.Constants.CRLF;
 import static org.apache.commons.csv.Constants.LF;
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertTrue;
 
 import org.apache.commons.csv.CSVFormat.CSVFormatBuilder;
@@ -159,7 +159,7 @@ public class CSVFormatBuilderTest {
     @Test
     public void testCopiedFormatIsEqualToOriginal() {
         CSVFormat copyOfRCF4180 = CSVFormat.newBuilder(RFC4180).build();
-        assertEquals(RFC4180, copyOfRCF4180);
+        assertEqualFormats(RFC4180, copyOfRCF4180);
     }
 
     @Test
@@ -168,14 +168,16 @@ public class CSVFormatBuilderTest {
         assertTrue(newFormat.getDelimiter() != RFC4180.getDelimiter());
     }
     
-    @Test
-    public void testHeaderReferenceCannotEscape() {
-        String[] header = new String[]{"one", "tow", "three"};
-        builder.withHeader(header);
-        
-        CSVFormat firstFormat = builder.build();
-        CSVFormat secondFormat = builder.build();
-        assertNotSame(header, firstFormat.getHeader());
-        assertNotSame(firstFormat, secondFormat.getHeader());
+    // FIXME implement equals on CSVFormat to allow use of Assert.assertEquals()
+    private static void assertEqualFormats(CSVFormat expected, CSVFormat acutal) {
+        assertEquals(expected.getCommentStart(), acutal.getCommentStart());
+        assertEquals(expected.getDelimiter(), acutal.getDelimiter());
+        assertEquals(expected.getEscape(), acutal.getEscape());
+        assertArrayEquals(expected.getHeader(), acutal.getHeader());
+        assertEquals(expected.getIgnoreEmptyLines(), acutal.getIgnoreEmptyLines());
+        assertEquals(expected.getIgnoreSurroundingSpaces(), acutal.getIgnoreSurroundingSpaces());
+        assertEquals(expected.getQuoteChar(), acutal.getQuoteChar());
+        assertEquals(expected.getQuotePolicy(), acutal.getQuotePolicy());
+        assertEquals(expected.getRecordSeparator(), acutal.getRecordSeparator());
     }
 }
diff --git a/src/test/java/org/apache/commons/csv/CSVFormatTest.java b/src/test/java/org/apache/commons/csv/CSVFormatTest.java
index b1076f2..3f7b51c 100644
--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java
+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java
@@ -18,7 +18,6 @@
 package org.apache.commons.csv;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 
 import java.io.ByteArrayInputStream;
@@ -66,153 +65,4 @@ public class CSVFormatTest {
         assertEquals("trim", CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces());
         assertEquals("empty lines", CSVFormat.DEFAULT.getIgnoreEmptyLines(), format.getIgnoreEmptyLines());
     }
-    
-    @Test
-    public void testEquals() {
-        CSVFormat right = CSVFormat.DEFAULT;
-        CSVFormat left = CSVFormat.newBuilder().build();
-
-        assertFalse(right.equals(null));
-        assertFalse(right.equals("A String Instance"));
-
-        assertEquals(right, right);
-        assertEquals(right, left);
-        assertEquals(left, right);
-        
-        assertEquals(right.hashCode(), right.hashCode());
-        assertEquals(right.hashCode(), left.hashCode());
-    }
-
-    @Test
-    public void testEqualsDelimiter() {
-        CSVFormat right = CSVFormat.newBuilder('!').build();
-        CSVFormat left = CSVFormat.newBuilder('?').build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsQuoteChar() {
-        CSVFormat right = CSVFormat.newBuilder('\'').withQuoteChar('"').build();
-        CSVFormat left = CSVFormat.newBuilder(right).withQuoteChar('!').build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsQuotePolicy() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withQuotePolicy(Quote.MINIMAL)
-                .build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsCommentStart() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .withCommentStart('#')
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withCommentStart('!')
-                .build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsEscape() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .withCommentStart('#')
-                .withEscape('+')
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withEscape('!')
-                .build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsIgnoreSurroundingSpaces() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .withCommentStart('#')
-                .withEscape('+')
-                .withIgnoreSurroundingSpaces(true)
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withIgnoreSurroundingSpaces(false)
-                .build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsIgnoreEmptyLines() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .withCommentStart('#')
-                .withEscape('+')
-                .withIgnoreSurroundingSpaces(true)
-                .withIgnoreEmptyLines(true)
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withIgnoreEmptyLines(false)
-                .build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsRecordSeparator() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .withCommentStart('#')
-                .withEscape('+')
-                .withIgnoreSurroundingSpaces(true)
-                .withIgnoreEmptyLines(true)
-                .withRecordSeparator('*')
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withRecordSeparator('!')
-                .build();
-
-        assertNotEquals(right, left);
-    }
-
-    @Test
-    public void testEqualsHeader() {
-        CSVFormat right = CSVFormat.newBuilder('\'')
-                .withQuoteChar('"')
-                .withQuotePolicy(Quote.ALL)
-                .withCommentStart('#')
-                .withEscape('+')
-                .withIgnoreSurroundingSpaces(true)
-                .withIgnoreEmptyLines(true)
-                .withRecordSeparator('*')
-                .withHeader("One", "Two", "Three")
-                .build();
-        CSVFormat left = CSVFormat.newBuilder(right)
-                .withHeader("Three", "Two", "One")
-                .build();
-        
-        assertNotEquals(right, left);
-    }
-
-    private static void assertNotEquals(Object right, Object left) {
-        assertFalse(right.equals(left));
-        assertFalse(left.equals(right));
-    }
 }
