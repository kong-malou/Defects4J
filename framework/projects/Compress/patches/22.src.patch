diff --git a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
index 1cd6f913..74dcb15b 100644
--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
@@ -64,6 +64,7 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
     private InputStream in;
     private final boolean decompressConcatenated;
 
+    private int currentChar = -1;
     private static final int EOF = 0;
     private static final int START_BLOCK_STATE = 1;
     private static final int RAND_PART_A_STATE = 2;
@@ -131,6 +132,7 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
 
         init(true);
         initBlock();
+        setupBlock();
     }
 
     @Override
@@ -168,13 +170,12 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
 
         final int hi = offs + len;
         int destOffs = offs;
-        int b;
-        while (destOffs < hi && ((b = read0()) >= 0)) {
+        for (int b; (destOffs < hi) && ((b = read0()) >= 0);) {
             dest[destOffs++] = (byte) b;
-            count(1);
         }
 
         int c = (destOffs == offs) ? -1 : (destOffs - offs);
+        count(c);
         return c;
     }
 
@@ -194,34 +195,41 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
     }
 
     private int read0() throws IOException {
-        switch (currentState) {
+        final int retChar = this.currentChar;
+
+        switch (this.currentState) {
         case EOF:
             return -1;
 
         case START_BLOCK_STATE:
-            return setupBlock();
+            throw new IllegalStateException();
 
         case RAND_PART_A_STATE:
             throw new IllegalStateException();
 
         case RAND_PART_B_STATE:
-            return setupRandPartB();
+            setupRandPartB();
+            break;
 
         case RAND_PART_C_STATE:
-            return setupRandPartC();
+            setupRandPartC();
+            break;
 
         case NO_RAND_PART_A_STATE:
             throw new IllegalStateException();
 
         case NO_RAND_PART_B_STATE:
-            return setupNoRandPartB();
+            setupNoRandPartB();
+            break;
 
         case NO_RAND_PART_C_STATE:
-            return setupNoRandPartC();
+            setupNoRandPartC();
+            break;
 
         default:
             throw new IllegalStateException();
         }
+        return retChar;
     }
 
     private boolean init(boolean isFirstStream) throws IOException {
@@ -790,9 +798,9 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
         return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];
     }
 
-    private int setupBlock() throws IOException {
-        if (currentState == EOF || this.data == null) {
-            return -1;
+    private void setupBlock() throws IOException {
+        if (this.data == null) {
+            return;
         }
 
         final int[] cftab = this.data.cftab;
@@ -822,12 +830,13 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
         if (this.blockRandomised) {
             this.su_rNToGo = 0;
             this.su_rTPos = 0;
-            return setupRandPartA();
+            setupRandPartA();
+        } else {
+            setupNoRandPartA();
         }
-        return setupNoRandPartA();
     }
 
-    private int setupRandPartA() throws IOException {
+    private void setupRandPartA() throws IOException {
         if (this.su_i2 <= this.last) {
             this.su_chPrev = this.su_ch2;
             int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;
@@ -842,39 +851,39 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
             }
             this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;
             this.su_i2++;
+            this.currentChar = su_ch2Shadow;
             this.currentState = RAND_PART_B_STATE;
             this.crc.updateCRC(su_ch2Shadow);
-            return su_ch2Shadow;
         } else {
             endBlock();
             initBlock();
-            return setupBlock();
+            setupBlock();
         }
     }
 
-    private int setupNoRandPartA() throws IOException {
+    private void setupNoRandPartA() throws IOException {
         if (this.su_i2 <= this.last) {
             this.su_chPrev = this.su_ch2;
             int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;
             this.su_ch2 = su_ch2Shadow;
             this.su_tPos = this.data.tt[this.su_tPos];
             this.su_i2++;
+            this.currentChar = su_ch2Shadow;
             this.currentState = NO_RAND_PART_B_STATE;
             this.crc.updateCRC(su_ch2Shadow);
-            return su_ch2Shadow;
         } else {
             this.currentState = NO_RAND_PART_A_STATE;
             endBlock();
             initBlock();
-            return setupBlock();
+            setupBlock();
         }
     }
 
-    private int setupRandPartB() throws IOException {
+    private void setupRandPartB() throws IOException {
         if (this.su_ch2 != this.su_chPrev) {
             this.currentState = RAND_PART_A_STATE;
             this.su_count = 1;
-            return setupRandPartA();
+            setupRandPartA();
         } else if (++this.su_count >= 4) {
             this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);
             this.su_tPos = this.data.tt[this.su_tPos];
@@ -891,51 +900,51 @@ public class BZip2CompressorInputStream extends CompressorInputStream implements
             if (this.su_rNToGo == 1) {
                 this.su_z ^= 1;
             }
-            return setupRandPartC();
+            setupRandPartC();
         } else {
             this.currentState = RAND_PART_A_STATE;
-            return setupRandPartA();
+            setupRandPartA();
         }
     }
 
-    private int setupRandPartC() throws IOException {
+    private void setupRandPartC() throws IOException {
         if (this.su_j2 < this.su_z) {
+            this.currentChar = this.su_ch2;
             this.crc.updateCRC(this.su_ch2);
             this.su_j2++;
-            return this.su_ch2;
         } else {
             this.currentState = RAND_PART_A_STATE;
             this.su_i2++;
             this.su_count = 0;
-            return setupRandPartA();
+            setupRandPartA();
         }
     }
 
-    private int setupNoRandPartB() throws IOException {
+    private void setupNoRandPartB() throws IOException {
         if (this.su_ch2 != this.su_chPrev) {
             this.su_count = 1;
-            return setupNoRandPartA();
+            setupNoRandPartA();
         } else if (++this.su_count >= 4) {
             this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);
             this.su_tPos = this.data.tt[this.su_tPos];
             this.su_j2 = 0;
-            return setupNoRandPartC();
+            setupNoRandPartC();
         } else {
-            return setupNoRandPartA();
+            setupNoRandPartA();
         }
     }
 
-    private int setupNoRandPartC() throws IOException {
+    private void setupNoRandPartC() throws IOException {
         if (this.su_j2 < this.su_z) {
             int su_ch2Shadow = this.su_ch2;
+            this.currentChar = su_ch2Shadow;
             this.crc.updateCRC(su_ch2Shadow);
             this.su_j2++;
             this.currentState = NO_RAND_PART_C_STATE;
-            return su_ch2Shadow;
         } else {
             this.su_i2++;
             this.su_count = 0;
-            return setupNoRandPartA();
+            setupNoRandPartA();
         }
     }
 
