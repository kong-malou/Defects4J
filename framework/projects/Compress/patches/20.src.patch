diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
index 0dea7a97..cd10b78e 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java
@@ -596,7 +596,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a block device.
      */
     public boolean isBlockDevice() {
-        return CpioUtil.fileType(mode) == C_ISBLK;
+        return (this.mode & S_IFMT) == C_ISBLK;
     }
 
     /**
@@ -605,7 +605,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a character device.
      */
     public boolean isCharacterDevice() {
-        return CpioUtil.fileType(mode) == C_ISCHR;
+        return (this.mode & S_IFMT) == C_ISCHR;
     }
 
     /**
@@ -614,7 +614,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a directory.
      */
     public boolean isDirectory() {
-        return CpioUtil.fileType(mode) == C_ISDIR;
+        return (this.mode & S_IFMT) == C_ISDIR;
     }
 
     /**
@@ -623,7 +623,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a network device.
      */
     public boolean isNetwork() {
-        return CpioUtil.fileType(mode) == C_ISNWK;
+        return (this.mode & S_IFMT) == C_ISNWK;
     }
 
     /**
@@ -632,7 +632,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a pipe.
      */
     public boolean isPipe() {
-        return CpioUtil.fileType(mode) == C_ISFIFO;
+        return (this.mode & S_IFMT) == C_ISFIFO;
     }
 
     /**
@@ -641,7 +641,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a regular file.
      */
     public boolean isRegularFile() {
-        return CpioUtil.fileType(mode) == C_ISREG;
+        return (this.mode & S_IFMT) == C_ISREG;
     }
 
     /**
@@ -650,7 +650,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a socket.
      */
     public boolean isSocket() {
-        return CpioUtil.fileType(mode) == C_ISSOCK;
+        return (this.mode & S_IFMT) == C_ISSOCK;
     }
 
     /**
@@ -659,7 +659,7 @@ public class CpioArchiveEntry implements CpioConstants, ArchiveEntry {
      * @return TRUE if this entry is a symbolic link.
      */
     public boolean isSymbolicLink() {
-        return CpioUtil.fileType(mode) == C_ISLNK;
+        return (this.mode & S_IFMT) == C_ISLNK;
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
index 664d0e6d..3678dfdb 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
@@ -328,7 +328,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
 
         ret.setInode(readAsciiLong(8, 16));
         long mode = readAsciiLong(8, 16);
-        if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0
+        if (mode != 0){ // mode is initialised to 0
             ret.setMode(mode);
         }
         ret.setUID(readAsciiLong(8, 16));
@@ -344,7 +344,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
         ret.setChksum(readAsciiLong(8, 16));
         String name = readCString((int) namesize);
         ret.setName(name);
-        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
+        if (mode == 0 && !name.equals(CPIO_TRAILER)){
             throw new IOException("Mode 0 only allowed in the trailer. Found entry name: "+name + " Occured at byte: " + getBytesRead());
         }
         skip(ret.getHeaderPadCount());
@@ -358,7 +358,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
         ret.setDevice(readAsciiLong(6, 8));
         ret.setInode(readAsciiLong(6, 8));
         final long mode = readAsciiLong(6, 8);
-        if (CpioUtil.fileType(mode) != 0) {
+        if (mode != 0) {
             ret.setMode(mode);
         }
         ret.setUID(readAsciiLong(6, 8));
@@ -370,7 +370,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
         ret.setSize(readAsciiLong(11, 8));
         final String name = readCString((int) namesize);
         ret.setName(name);
-        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
+        if (mode == 0 && !name.equals(CPIO_TRAILER)){
             throw new IOException("Mode 0 only allowed in the trailer. Found entry: "+ name + " Occured at byte: " + getBytesRead());
         }
 
@@ -384,7 +384,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
         ret.setDevice(readBinaryLong(2, swapHalfWord));
         ret.setInode(readBinaryLong(2, swapHalfWord));
         final long mode = readBinaryLong(2, swapHalfWord);
-        if (CpioUtil.fileType(mode) != 0){
+        if (mode != 0){
             ret.setMode(mode);
         }
         ret.setUID(readBinaryLong(2, swapHalfWord));
@@ -396,7 +396,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
         ret.setSize(readBinaryLong(4, swapHalfWord));
         final String name = readCString((int) namesize);
         ret.setName(name);
-        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
+        if (mode == 0 && !name.equals(CPIO_TRAILER)){
             throw new IOException("Mode 0 only allowed in the trailer. Found entry: "+name + "Occured at byte: " + getBytesRead());
         }
         skip(ret.getHeaderPadCount());
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java
index 26b51fc4..940bab78 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java
@@ -28,9 +28,6 @@ class CpioUtil {
     /**
      * Extracts the file type bits from a mode.
      */
-    static long fileType(long mode) {
-        return mode & CpioConstants.S_IFMT;
-    }
 
     /**
      * Converts a byte array to a long. Halfwords can be swapped by setting
