diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
index bcd35e2..e96c44c 100644
--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
@@ -74,8 +74,8 @@ public abstract class TypeDeserializerBase
         // 22-Dec-2015, tatu: as per [databind#1055], avoid NPE
         _typePropertyName = (typePropertyName == null) ? "" : typePropertyName;
         _typeIdVisible = typeIdVisible;
-        // defaults are fine, although shouldn't need much concurrency
-        _deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 2);
+        // defaults are fine, although concurrency of 4 bit more frugal than 16:
+        _deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 4);
         if (defaultImpl == null) {
             _defaultImpl = null;
         } else {
diff --git a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
index 1c741ec..bd2ad00 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
@@ -123,16 +123,7 @@ public class SimpleType // note: until 2.6 was final
             return this;
         }
         // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, this, _superInterfaces,
+        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
     }
     
