diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 1960d57..d4ff8be 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -899,7 +899,7 @@ public class BeanDeserializer
                         if (bean.getClass() != _beanType.getRawClass()) {
                             // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
                             //   it's too complicated, so bail out
-                            ctxt.reportMappingException("Can not create polymorphic instances with external type ids");
+                            ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                             return null;
                         }
                         return ext.complete(p, ctxt, bean);
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
index 43445e2..76ab002 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
@@ -607,9 +607,7 @@ public abstract class BeanDeserializerBase
         }
 
         if (extTypes != null) {
-            // 21-Jun-2016, tatu: related to [databind#999], may need to link type ids too,
-            //    so need to pass collected properties
-            _externalTypeIdHandler = extTypes.build(_beanProperties);
+            _externalTypeIdHandler = extTypes.build();
             // we consider this non-standard, to offline handling
             _nonStandardCreation = true;
         }
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
index 30fb56f..2f19138 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
@@ -186,8 +186,6 @@ public class ExternalTypeHandler
         Object[] values = new Object[len];
         for (int i = 0; i < len; ++i) {
             String typeId = _typeIds[i];
-            final ExtTypedProperty extProp = _properties[i];
-
             if (typeId == null) {
                 // let's allow missing both type and property (may already have been set, too)
                 if (_tokens[i] == null) {
@@ -195,30 +193,24 @@ public class ExternalTypeHandler
                 }
                 // but not just one
                 // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
-                if (!extProp.hasDefaultType()) {
+                if (!_properties[i].hasDefaultType()) {
                     ctxt.reportMappingException("Missing external type id property '%s'",
-                            extProp.getTypePropertyName());
+                            _properties[i].getTypePropertyName());
                 } else {
-                    typeId = extProp.getDefaultTypeId();
+                    typeId = _properties[i].getDefaultTypeId();
                 }
             } else if (_tokens[i] == null) {
-                SettableBeanProperty prop = extProp.getProperty();
+                SettableBeanProperty prop = _properties[i].getProperty();
                 ctxt.reportMappingException("Missing property '%s' for external type id '%s'",
                         prop.getName(), _properties[i].getTypePropertyName());
             }
             values[i] = _deserialize(p, ctxt, i, typeId);
-
-            final SettableBeanProperty prop = extProp.getProperty();
-            // also: if it's creator prop, fill in
-            if (prop.getCreatorIndex() >= 0) {
+        }
+        // second: fill in creator properties:
+        for (int i = 0; i < len; ++i) {
+            SettableBeanProperty prop = _properties[i].getProperty();
+            if (creator.findCreatorProperty(prop.getName()) != null) {
                 buffer.assignParameter(prop, values[i]);
-
-                // [databind#999] And maybe there's creator property for type id too?
-                SettableBeanProperty typeProp = extProp.getTypeProperty();
-                // for now, should only be needed for creator properties, too
-                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                    buffer.assignParameter(typeProp, typeId);
-                }
             }
         }
 
@@ -226,7 +218,7 @@ public class ExternalTypeHandler
         // third: assign non-creator properties
         for (int i = 0; i < len; ++i) {
             SettableBeanProperty prop = _properties[i].getProperty();
-            if (prop.getCreatorIndex() < 0) {
+            if (creator.findCreatorProperty(prop.getName()) == null) {
                 prop.set(bean, values[i]);
             }
         }
@@ -300,30 +292,6 @@ public class ExternalTypeHandler
             _nameToPropertyIndex.put(typeDeser.getPropertyName(), index);
         }
 
-        /**
-         * Method called after all external properties have been assigned, to further
-         * link property with polymorphic value with possible property for type id
-         * itself. This is needed to support type ids as Creator properties.
-         *
-         * @since 2.8
-         */
-        public ExternalTypeHandler build(BeanPropertyMap otherProps) {
-            // 21-Jun-2016, tatu: as per [databind#999], may need to link type id property also
-            final int len = _properties.size();
-            ExtTypedProperty[] extProps = new ExtTypedProperty[len];
-            for (int i = 0; i < len; ++i) {
-                ExtTypedProperty extProp = _properties.get(i);
-                String typePropId = extProp.getTypePropertyName();
-                SettableBeanProperty typeProp = otherProps.find(typePropId);
-                if (typeProp != null) {
-                    extProp.linkTypeProperty(typeProp);
-                }
-                extProps[i] = extProp;
-            }
-            return new ExternalTypeHandler(extProps, _nameToPropertyIndex, null, null);
-        }
-
-        @Deprecated // since 2.8; may be removed as early as 2.9
         public ExternalTypeHandler build() {
             return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]),
                     _nameToPropertyIndex, null, null);
@@ -336,11 +304,6 @@ public class ExternalTypeHandler
         private final TypeDeserializer _typeDeserializer;
         private final String _typePropertyName;
 
-        /**
-         * @since 2.8
-         */
-        private SettableBeanProperty _typeProperty;
-
         public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser)
         {
             _property = property;
@@ -348,13 +311,6 @@ public class ExternalTypeHandler
             _typePropertyName = typeDeser.getPropertyName();
         }
 
-        /**
-         * @since 2.8
-         */
-        public void linkTypeProperty(SettableBeanProperty p) {
-            _typeProperty = p;
-        }
-
         public boolean hasTypePropertyName(String n) {
             return n.equals(_typePropertyName);
         }
@@ -381,12 +337,5 @@ public class ExternalTypeHandler
         public SettableBeanProperty getProperty() {
             return _property;
         }
-
-        /**
-         * @since 2.8
-         */
-        public SettableBeanProperty getTypeProperty() {
-            return _typeProperty;
-        }
     }
 }
