diff --git a/src/test/java/com/fasterxml/jackson/databind/creators/ArrayDelegatorCreatorForCollectionTest.java b/src/test/java/com/fasterxml/jackson/databind/creators/ArrayDelegatorCreatorForCollectionTest.java
deleted file mode 100644
index c0cb961..0000000
--- a/src/test/java/com/fasterxml/jackson/databind/creators/ArrayDelegatorCreatorForCollectionTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.fasterxml.jackson.databind.creators;
-
-import java.util.Collections;
-import java.util.Set;
-
-import com.fasterxml.jackson.annotation.*;
-
-import com.fasterxml.jackson.databind.*;
-
-public class ArrayDelegatorCreatorForCollectionTest extends BaseMapTest
-{
-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
-    abstract static class UnmodifiableSetMixin {
-
-        @JsonCreator
-        public UnmodifiableSetMixin(Set<?> s) {}
-    }
-
-    public void testUnmodifiable() throws Exception
-    {
-        ObjectMapper mapper = new ObjectMapper();
-        Class<?> unmodSetType = Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();
-        mapper.addMixIn(unmodSetType, UnmodifiableSetMixin.class);
-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
-
-        final String EXPECTED_JSON = "[\""+unmodSetType.getName()+"\",[]]";
-
-        Set<?> foo = mapper.readValue(EXPECTED_JSON, Set.class);
-        assertTrue(foo.isEmpty());
-    }
-}
diff --git a/src/test/java/com/fasterxml/jackson/failing/UnmodifiableSetTyping1392Test.java b/src/test/java/com/fasterxml/jackson/failing/UnmodifiableSetTyping1392Test.java
new file mode 100644
index 0000000..8b371fa
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/failing/UnmodifiableSetTyping1392Test.java
@@ -0,0 +1,31 @@
+package com.fasterxml.jackson.failing;
+
+import java.util.Collections;
+import java.util.Set;
+
+import com.fasterxml.jackson.annotation.*;
+
+import com.fasterxml.jackson.databind.*;
+
+public class UnmodifiableSetTyping1392Test extends BaseMapTest
+{
+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
+    abstract static class UnmodifiableSetMixin {
+
+        @JsonCreator
+        public UnmodifiableSetMixin(Set<?> s) {}
+    }
+
+    public void testUnmodifiable() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        Class<?> unmodSetType = Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();
+        mapper.addMixIn(unmodSetType, UnmodifiableSetMixin.class);
+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
+
+        final String EXPECTED_JSON = "[\""+unmodSetType.getName()+"\",[]]";
+
+        Set<?> foo = mapper.readValue(EXPECTED_JSON, Set.class);
+        assertTrue(foo.isEmpty());
+    }
+}
