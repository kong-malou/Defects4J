diff --git a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
index a979a10..f6ffe42 100644
--- a/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
+++ b/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java
@@ -57,7 +57,7 @@ public class DOMAttributeIterator implements NodeIterator {
                 int count = map.getLength();
                 for (int i = 0; i < count; i++) {
                     Attr attr = (Attr) map.item(i);
-                    if (testAttr(attr)) {
+                    if (testAttr(attr, name)) {
                         attributes.add(attr);
                     }
                 }
@@ -65,7 +65,7 @@ public class DOMAttributeIterator implements NodeIterator {
         }
     }
 
-    private boolean testAttr(Attr attr) {
+    private boolean testAttr(Attr attr, QName testName) {
         String nodePrefix = DOMNodePointer.getPrefix(attr);
         String nodeLocalName = DOMNodePointer.getLocalName(attr);
 
@@ -79,16 +79,22 @@ public class DOMAttributeIterator implements NodeIterator {
 
         String testLocalName = name.getName();
         if (testLocalName.equals("*") || testLocalName.equals(nodeLocalName)) {
-            String testPrefix = name.getPrefix();
+            String testPrefix = testName.getPrefix();
 
-            if (testPrefix == null || equalStrings(testPrefix, nodePrefix)) {
+            if (equalStrings(testPrefix, nodePrefix)) {
                 return true;
             }
-            if (nodePrefix == null) {
-                return false;
+
+            String testNS = null;
+            if (testPrefix != null) {
+                testNS = parent.getNamespaceURI(testPrefix);
+            }
+
+            String nodeNS = null;
+            if (nodePrefix != null) {
+                nodeNS = parent.getNamespaceURI(nodePrefix);
             }
-            return equalStrings(parent.getNamespaceURI(testPrefix), parent
-                    .getNamespaceURI(nodePrefix));
+            return equalStrings(testNS, nodeNS);
         }
         return false;
     }
@@ -117,7 +123,7 @@ public class DOMAttributeIterator implements NodeIterator {
             NamedNodeMap nnm = element.getAttributes();
             for (int i = 0; i < nnm.getLength(); i++) {
                 attr = (Attr) nnm.item(i);
-                if (testAttr(attr)) {
+                if (testAttr(attr, name)) {
                     return attr;
                 }
             }
diff --git a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
index d7b7a30..e52ee1e 100644
--- a/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
+++ b/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java
@@ -67,9 +67,11 @@ public class JDOMAttributeIterator implements NodeIterator {
             String lname = name.getName();
             if (!lname.equals("*")) {
                 attributes = new ArrayList();
-                Attribute attr = element.getAttribute(lname, ns);
-                if (attr != null) {
-                    attributes.add(attr);
+                if (ns != null) {
+                    Attribute attr = element.getAttribute(lname, ns);
+                    if (attr != null) {
+                        attributes.add(attr);
+                    }
                 }
             }
             else {
@@ -77,8 +79,7 @@ public class JDOMAttributeIterator implements NodeIterator {
                 List allAttributes = element.getAttributes();
                 for (int i = 0; i < allAttributes.size(); i++) {
                     Attribute attr = (Attribute) allAttributes.get(i);
-                    if (ns == Namespace.NO_NAMESPACE
-                            || attr.getNamespace().equals(ns)) {
+                    if (attr.getNamespace().equals(ns)) {
                         attributes.add(attr);
                     }
                 }
