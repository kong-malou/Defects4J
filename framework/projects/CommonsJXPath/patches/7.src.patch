diff --git a/src/java/org/apache/commons/jxpath/ri/Compiler.java b/src/java/org/apache/commons/jxpath/ri/Compiler.java
index 34a239e..4d0162a 100644
--- a/src/java/org/apache/commons/jxpath/ri/Compiler.java
+++ b/src/java/org/apache/commons/jxpath/ri/Compiler.java
@@ -96,8 +96,6 @@ public interface Compiler {
     public static final int FUNCTION_NULL = 28;
     public static final int FUNCTION_KEY = 29;
     public static final int FUNCTION_FORMAT_NUMBER = 30;
-    
-    public static final int FUNCTION_ENDS_WITH = 31;
 
     /**
      * Produces an EXPRESSION object that represents a numeric constant.
diff --git a/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java b/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
index 2332276..079c8bb 100644
--- a/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
+++ b/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
@@ -89,8 +89,6 @@ public class CoreFunction extends Operation {
                 return "concat";
             case Compiler.FUNCTION_STARTS_WITH :
                 return "starts-with";
-            case Compiler.FUNCTION_ENDS_WITH :
-                return "ends-with";
             case Compiler.FUNCTION_CONTAINS :
                 return "contains";
             case Compiler.FUNCTION_SUBSTRING_BEFORE :
@@ -201,7 +199,6 @@ public class CoreFunction extends Operation {
             case Compiler.FUNCTION_ID:
             case Compiler.FUNCTION_CONCAT:
             case Compiler.FUNCTION_STARTS_WITH:
-            case Compiler.FUNCTION_ENDS_WITH:
             case Compiler.FUNCTION_CONTAINS:
             case Compiler.FUNCTION_SUBSTRING_BEFORE:
             case Compiler.FUNCTION_SUBSTRING_AFTER:
@@ -266,8 +263,6 @@ public class CoreFunction extends Operation {
                 return functionConcat(context);
             case Compiler.FUNCTION_STARTS_WITH :
                 return functionStartsWith(context);
-            case Compiler.FUNCTION_ENDS_WITH :
-                return functionEndsWith(context);
             case Compiler.FUNCTION_CONTAINS :
                 return functionContains(context);
             case Compiler.FUNCTION_SUBSTRING_BEFORE :
@@ -548,19 +543,6 @@ public class CoreFunction extends Operation {
     }
 
     /**
-     * ends-with() implementation.
-     * @param context evaluation context
-     * @return Boolean
-     * @since 1.4
-     */
-    protected Object functionEndsWith(EvalContext context) {
-        assertArgCount(2);
-        String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));
-        String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));
-        return s1.endsWith(s2) ? Boolean.TRUE : Boolean.FALSE;
-    }
-
-    /**
      * contains() implementation.
      * @param context evaluation context
      * @return Boolean
diff --git a/src/java/org/apache/commons/jxpath/ri/parser/XPath.jj b/src/java/org/apache/commons/jxpath/ri/parser/XPath.jj
index 5a899e4..4182a84 100644
--- a/src/java/org/apache/commons/jxpath/ri/parser/XPath.jj
+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPath.jj
@@ -281,7 +281,6 @@ TOKEN:
 |   <FUNCTION_STRING: "string">
 |   <FUNCTION_CONCAT: "concat">
 |   <FUNCTION_STARTS_WITH: "starts-with">
-|   <FUNCTION_ENDS_WITH: "ends-with">
 |   <FUNCTION_CONTAINS: "contains">
 |   <FUNCTION_SUBSTRING_BEFORE: "substring-before">
 |   <FUNCTION_SUBSTRING_AFTER: "substring-after">
@@ -327,7 +326,6 @@ String NCName() :
     |   <FUNCTION_STRING>
     |   <FUNCTION_CONCAT>
     |   <FUNCTION_STARTS_WITH>
-    |   <FUNCTION_ENDS_WITH>
     |   <FUNCTION_CONTAINS>
     |   <FUNCTION_SUBSTRING_BEFORE>
     |   <FUNCTION_SUBSTRING_AFTER>
@@ -385,7 +383,6 @@ int CoreFunctionName() :
     |   <FUNCTION_STRING>           { code = Compiler.FUNCTION_STRING; }
     |   <FUNCTION_CONCAT>           { code = Compiler.FUNCTION_CONCAT; }
     |   <FUNCTION_STARTS_WITH>      { code = Compiler.FUNCTION_STARTS_WITH; }
-    |   <FUNCTION_ENDS_WITH>        { code = Compiler.FUNCTION_ENDS_WITH; }
     |   <FUNCTION_CONTAINS>         { code = Compiler.FUNCTION_CONTAINS; }
     |   <FUNCTION_SUBSTRING_BEFORE> { code = Compiler.FUNCTION_SUBSTRING_BEFORE; }
     |   <FUNCTION_SUBSTRING_AFTER>  { code = Compiler.FUNCTION_SUBSTRING_AFTER; }
diff --git a/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java b/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
index 2b79e7a..639a8b4 100644
--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java
@@ -77,9 +77,6 @@
     case FUNCTION_STARTS_WITH:
       jj_consume_token(FUNCTION_STARTS_WITH);
       break;
-    case FUNCTION_ENDS_WITH:
-      jj_consume_token(FUNCTION_ENDS_WITH);
-      break;
     case FUNCTION_CONTAINS:
       jj_consume_token(FUNCTION_CONTAINS);
       break;
@@ -218,10 +215,6 @@
       jj_consume_token(FUNCTION_STARTS_WITH);
                                       code = Compiler.FUNCTION_STARTS_WITH;
       break;
-    case FUNCTION_ENDS_WITH:
-      jj_consume_token(FUNCTION_ENDS_WITH);
-                                      code = Compiler.FUNCTION_ENDS_WITH;
-      break;
     case FUNCTION_CONTAINS:
       jj_consume_token(FUNCTION_CONTAINS);
                                       code = Compiler.FUNCTION_CONTAINS;
@@ -315,8 +308,8 @@
  String nc1, nc2 = null;
     nc1 = NCName();
     switch (jj_nt.kind) {
-    case 80:
-      jj_consume_token(80);
+    case 79:
+      jj_consume_token(79);
       nc2 = NCName();
       break;
     default:
@@ -336,7 +329,7 @@
     String nc1, nc2 = null;
     if (jj_2_1(2147483647)) {
       nc1 = NCName();
-      jj_consume_token(80);
+      jj_consume_token(79);
       nc2 = NCName();
     } else {
       switch (jj_nt.kind) {
@@ -476,7 +469,6 @@
     case FUNCTION_STRING:
     case FUNCTION_CONCAT:
     case FUNCTION_STARTS_WITH:
-    case FUNCTION_ENDS_WITH:
     case FUNCTION_CONTAINS:
     case FUNCTION_SUBSTRING_BEFORE:
     case FUNCTION_SUBSTRING_AFTER:
@@ -497,10 +489,10 @@
     case FUNCTION_ROUND:
     case FUNCTION_FORMAT_NUMBER:
     case NCName:
+    case 82:
     case 83:
-    case 84:
-    case 87:
-    case 89:
+    case 86:
+    case 88:
       ex = RelativeLocationPath();
       break;
     case SLASH:
@@ -643,7 +635,6 @@
     case FUNCTION_STRING:
     case FUNCTION_CONCAT:
     case FUNCTION_STARTS_WITH:
-    case FUNCTION_ENDS_WITH:
     case FUNCTION_CONTAINS:
     case FUNCTION_SUBSTRING_BEFORE:
     case FUNCTION_SUBSTRING_AFTER:
@@ -664,19 +655,19 @@
     case FUNCTION_ROUND:
     case FUNCTION_FORMAT_NUMBER:
     case NCName:
-    case 87:
-    case 89:
+    case 86:
+    case 88:
       axis = AxisSpecifier();
       if (jj_2_3(2147483647)) {
         type = NodeType();
+        jj_consume_token(80);
         jj_consume_token(81);
-        jj_consume_token(82);
       } else if (jj_2_4(2147483647)) {
         jj_consume_token(PI);
-        jj_consume_token(81);
+        jj_consume_token(80);
         jj_consume_token(Literal);
                     instruction = unescape(token.image.substring(1, token.image.length() - 1));
-        jj_consume_token(82);
+        jj_consume_token(81);
       } else {
         switch (jj_nt.kind) {
         case OR:
@@ -698,7 +689,6 @@
         case FUNCTION_STRING:
         case FUNCTION_CONCAT:
         case FUNCTION_STARTS_WITH:
-        case FUNCTION_ENDS_WITH:
         case FUNCTION_CONTAINS:
         case FUNCTION_SUBSTRING_BEFORE:
         case FUNCTION_SUBSTRING_AFTER:
@@ -719,7 +709,7 @@
         case FUNCTION_ROUND:
         case FUNCTION_FORMAT_NUMBER:
         case NCName:
-        case 89:
+        case 88:
           name = WildcardName();
           break;
         default:
@@ -729,13 +719,13 @@
         }
       }
       break;
-    case 83:
-      jj_consume_token(83);
+    case 82:
+      jj_consume_token(82);
                     axis = Compiler.AXIS_SELF;
                     type = Compiler.NODE_TYPE_NODE;
       break;
-    case 84:
-      jj_consume_token(84);
+    case 83:
+      jj_consume_token(83);
                     axis = Compiler.AXIS_PARENT;
                     type = Compiler.NODE_TYPE_NODE;
       break;
@@ -747,7 +737,7 @@
     label_3:
     while (true) {
       switch (jj_nt.kind) {
-      case 85:
+      case 84:
         ;
         break;
       default:
@@ -880,9 +870,9 @@
 /* [9] PredicateExpr ::=  Expr  */
   final public Object Predicate() throws ParseException {
     Object ex;
-    jj_consume_token(85);
+    jj_consume_token(84);
     ex = Expression();
-    jj_consume_token(86);
+    jj_consume_token(85);
         {if (true) return ex;}
     throw new Error("Missing return statement in function");
   }
@@ -893,8 +883,8 @@
   final public int AbbreviatedAxisSpecifier() throws ParseException {
     int axis = Compiler.AXIS_CHILD;
     switch (jj_nt.kind) {
-    case 87:
-      jj_consume_token(87);
+    case 86:
+      jj_consume_token(86);
            axis = Compiler.AXIS_ATTRIBUTE;
       break;
     default:
@@ -938,10 +928,10 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
     case VARIABLE:
       ex = VariableReference();
       break;
-    case 81:
-      jj_consume_token(81);
+    case 80:
+      jj_consume_token(80);
       ex = Expression();
-      jj_consume_token(82);
+      jj_consume_token(81);
       break;
     case Literal:
       jj_consume_token(Literal);
@@ -976,7 +966,6 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
         case FUNCTION_STRING:
         case FUNCTION_CONCAT:
         case FUNCTION_STARTS_WITH:
-        case FUNCTION_ENDS_WITH:
         case FUNCTION_CONTAINS:
         case FUNCTION_SUBSTRING_BEFORE:
         case FUNCTION_SUBSTRING_AFTER:
@@ -1046,7 +1035,7 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
   final public ArrayList ArgumentList() throws ParseException {
     ArrayList args = null;
     Object arg;
-    jj_consume_token(81);
+    jj_consume_token(80);
     switch (jj_nt.kind) {
     case SLASH:
     case SLASHSLASH:
@@ -1086,7 +1075,6 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
     case FUNCTION_STRING:
     case FUNCTION_CONCAT:
     case FUNCTION_STARTS_WITH:
-    case FUNCTION_ENDS_WITH:
     case FUNCTION_CONTAINS:
     case FUNCTION_SUBSTRING_BEFORE:
     case FUNCTION_SUBSTRING_AFTER:
@@ -1107,24 +1095,24 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
     case FUNCTION_ROUND:
     case FUNCTION_FORMAT_NUMBER:
     case NCName:
-    case 81:
+    case 80:
+    case 82:
     case 83:
-    case 84:
-    case 87:
-    case 89:
+    case 86:
+    case 88:
       arg = Argument();
                                 args = new ArrayList(); args.add(arg);
       label_4:
       while (true) {
         switch (jj_nt.kind) {
-        case 88:
+        case 87:
           ;
           break;
         default:
           jj_la1[18] = jj_gen;
           break label_4;
         }
-        jj_consume_token(88);
+        jj_consume_token(87);
         arg = Argument();
                                        args.add(arg);
       }
@@ -1133,7 +1121,7 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
       jj_la1[19] = jj_gen;
       ;
     }
-    jj_consume_token(82);
+    jj_consume_token(81);
         {if (true) return args;}
     throw new Error("Missing return statement in function");
   }
@@ -1222,7 +1210,6 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
       case FUNCTION_STRING:
       case FUNCTION_CONCAT:
       case FUNCTION_STARTS_WITH:
-      case FUNCTION_ENDS_WITH:
       case FUNCTION_CONTAINS:
       case FUNCTION_SUBSTRING_BEFORE:
       case FUNCTION_SUBSTRING_AFTER:
@@ -1243,10 +1230,10 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
       case FUNCTION_ROUND:
       case FUNCTION_FORMAT_NUMBER:
       case NCName:
+      case 82:
       case 83:
-      case 84:
-      case 87:
-      case 89:
+      case 86:
+      case 88:
         ex = LocationPath();
         break;
       default:
@@ -1269,7 +1256,7 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
     label_6:
     while (true) {
       switch (jj_nt.kind) {
-      case 85:
+      case 84:
         ;
         break;
       default:
@@ -1517,7 +1504,7 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
       switch (jj_nt.kind) {
       case MOD:
       case DIV:
-      case 89:
+      case 88:
         ;
         break;
       default:
@@ -1525,8 +1512,8 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
         break label_14;
       }
       switch (jj_nt.kind) {
-      case 89:
-        jj_consume_token(89);
+      case 88:
+        jj_consume_token(88);
         r = UnaryExpr();
                                     ex = compiler.multiply(ex, r);
         break;
@@ -1591,7 +1578,6 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
     case FUNCTION_STRING:
     case FUNCTION_CONCAT:
     case FUNCTION_STARTS_WITH:
-    case FUNCTION_ENDS_WITH:
     case FUNCTION_CONTAINS:
     case FUNCTION_SUBSTRING_BEFORE:
     case FUNCTION_SUBSTRING_AFTER:
@@ -1612,11 +1598,11 @@ For example, 3 > 2 > 1 is equivalent to (3 > 2) > 1, which evaluates to false.
     case FUNCTION_ROUND:
     case FUNCTION_FORMAT_NUMBER:
     case NCName:
-    case 81:
+    case 80:
+    case 82:
     case 83:
-    case 84:
-    case 87:
-    case 89:
+    case 86:
+    case 88:
       ex = UnionExpr();
       break;
     case MINUS:
@@ -1688,8 +1674,8 @@ specified to disambiguate the grammar:
     Object qn;
     String nc1, nc2 = null;
     switch (jj_nt.kind) {
-    case 89:
-      jj_consume_token(89);
+    case 88:
+      jj_consume_token(88);
       break;
     case OR:
     case AND:
@@ -1710,7 +1696,6 @@ specified to disambiguate the grammar:
     case FUNCTION_STRING:
     case FUNCTION_CONCAT:
     case FUNCTION_STARTS_WITH:
-    case FUNCTION_ENDS_WITH:
     case FUNCTION_CONTAINS:
     case FUNCTION_SUBSTRING_BEFORE:
     case FUNCTION_SUBSTRING_AFTER:
@@ -1740,11 +1725,11 @@ specified to disambiguate the grammar:
     }
                            nc1 = token.image;
     switch (jj_nt.kind) {
-    case 80:
-      jj_consume_token(80);
+    case 79:
+      jj_consume_token(79);
       switch (jj_nt.kind) {
-      case 89:
-        jj_consume_token(89);
+      case 88:
+        jj_consume_token(88);
         break;
       case OR:
       case AND:
@@ -1765,7 +1750,6 @@ specified to disambiguate the grammar:
       case FUNCTION_STRING:
       case FUNCTION_CONCAT:
       case FUNCTION_STARTS_WITH:
-      case FUNCTION_ENDS_WITH:
       case FUNCTION_CONTAINS:
       case FUNCTION_SUBSTRING_BEFORE:
       case FUNCTION_SUBSTRING_AFTER:
@@ -1840,335 +1824,621 @@ specified to disambiguate the grammar:
 
   final private boolean jj_2_1(int xla) {
     jj_la = xla; jj_lastpos = jj_scanpos = token;
-    try { return !jj_3_1(); }
-    catch(LookaheadSuccess ls) { return true; }
-    finally { jj_save(0, xla); }
+    boolean retval = !jj_3_1();
+    jj_save(0, xla);
+    return retval;
   }
 
   final private boolean jj_2_2(int xla) {
     jj_la = xla; jj_lastpos = jj_scanpos = token;
-    try { return !jj_3_2(); }
-    catch(LookaheadSuccess ls) { return true; }
-    finally { jj_save(1, xla); }
+    boolean retval = !jj_3_2();
+    jj_save(1, xla);
+    return retval;
   }
 
   final private boolean jj_2_3(int xla) {
     jj_la = xla; jj_lastpos = jj_scanpos = token;
-    try { return !jj_3_3(); }
-    catch(LookaheadSuccess ls) { return true; }
-    finally { jj_save(2, xla); }
+    boolean retval = !jj_3_3();
+    jj_save(2, xla);
+    return retval;
   }
 
   final private boolean jj_2_4(int xla) {
     jj_la = xla; jj_lastpos = jj_scanpos = token;
-    try { return !jj_3_4(); }
-    catch(LookaheadSuccess ls) { return true; }
-    finally { jj_save(3, xla); }
+    boolean retval = !jj_3_4();
+    jj_save(3, xla);
+    return retval;
   }
 
   final private boolean jj_2_5(int xla) {
     jj_la = xla; jj_lastpos = jj_scanpos = token;
-    try { return !jj_3_5(); }
-    catch(LookaheadSuccess ls) { return true; }
-    finally { jj_save(4, xla); }
+    boolean retval = !jj_3_5();
+    jj_save(4, xla);
+    return retval;
   }
 
   final private boolean jj_2_6(int xla) {
     jj_la = xla; jj_lastpos = jj_scanpos = token;
-    try { return !jj_3_6(); }
-    catch(LookaheadSuccess ls) { return true; }
-    finally { jj_save(5, xla); }
+    boolean retval = !jj_3_6();
+    jj_save(5, xla);
+    return retval;
   }
 
-  final private boolean jj_3_2() {
-    if (jj_3R_16()) return true;
+  final private boolean jj_3R_65() {
+    if (jj_scan_token(FUNCTION_ID)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_144() {
-    if (jj_3R_16()) return true;
+  final private boolean jj_3R_104() {
+    if (jj_3R_118()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_143() {
-    if (jj_3R_77()) return true;
+  final private boolean jj_3R_64() {
+    if (jj_scan_token(FUNCTION_COUNT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_150() {
-    if (jj_3R_16()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_151()) { jj_scanpos = xsp; break; }
-    }
+  final private boolean jj_3R_63() {
+    if (jj_scan_token(FUNCTION_POSITION)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_132() {
-    if (jj_scan_token(MINUS)) return true;
-    if (jj_3R_129()) return true;
+  final private boolean jj_3R_62() {
+    if (jj_scan_token(FUNCTION_LAST)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_130() {
+  final private boolean jj_3R_18() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_133()) {
+    if (jj_3R_62()) {
     jj_scanpos = xsp;
-    if (jj_3R_134()) {
+    if (jj_3R_63()) {
     jj_scanpos = xsp;
-    if (jj_3R_135()) return true;
-    }
-    }
+    if (jj_3R_64()) {
+    jj_scanpos = xsp;
+    if (jj_3R_65()) {
+    jj_scanpos = xsp;
+    if (jj_3R_66()) {
+    jj_scanpos = xsp;
+    if (jj_3R_67()) {
+    jj_scanpos = xsp;
+    if (jj_3R_68()) {
+    jj_scanpos = xsp;
+    if (jj_3R_69()) {
+    jj_scanpos = xsp;
+    if (jj_3R_70()) {
+    jj_scanpos = xsp;
+    if (jj_3R_71()) {
+    jj_scanpos = xsp;
+    if (jj_3R_72()) {
+    jj_scanpos = xsp;
+    if (jj_3R_73()) {
+    jj_scanpos = xsp;
+    if (jj_3R_74()) {
+    jj_scanpos = xsp;
+    if (jj_3R_75()) {
+    jj_scanpos = xsp;
+    if (jj_3R_76()) {
+    jj_scanpos = xsp;
+    if (jj_3R_77()) {
+    jj_scanpos = xsp;
+    if (jj_3R_78()) {
+    jj_scanpos = xsp;
+    if (jj_3R_79()) {
+    jj_scanpos = xsp;
+    if (jj_3R_80()) {
+    jj_scanpos = xsp;
+    if (jj_3R_81()) {
+    jj_scanpos = xsp;
+    if (jj_3R_82()) {
+    jj_scanpos = xsp;
+    if (jj_3R_83()) {
+    jj_scanpos = xsp;
+    if (jj_3R_84()) {
+    jj_scanpos = xsp;
+    if (jj_3R_85()) {
+    jj_scanpos = xsp;
+    if (jj_3R_86()) {
+    jj_scanpos = xsp;
+    if (jj_3R_87()) {
+    jj_scanpos = xsp;
+    if (jj_3R_88()) {
+    jj_scanpos = xsp;
+    if (jj_3R_89()) {
+    jj_scanpos = xsp;
+    if (jj_3R_90()) {
+    jj_scanpos = xsp;
+    if (jj_3R_91()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_148() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_150()) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(6)) return true;
-    }
+  final private boolean jj_3R_111() {
+    if (jj_scan_token(DIV)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_131() {
-    if (jj_3R_136()) return true;
+  final private boolean jj_3R_110() {
+    if (jj_scan_token(MOD)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_64() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(79)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(27)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(28)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(29)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(30)) return true;
-    }
-    }
-    }
-    }
+  final private boolean jj_3R_109() {
+    if (jj_scan_token(AND)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_113() {
-    if (jj_scan_token(87)) return true;
+  final private boolean jj_3R_108() {
+    if (jj_scan_token(OR)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_91() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_113()) jj_scanpos = xsp;
+  final private boolean jj_3R_107() {
+    if (jj_scan_token(NCName)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_141() {
-    if (jj_3R_19()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_143()) { jj_scanpos = xsp; break; }
-    }
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_144()) { jj_scanpos = xsp; break; }
-    }
+  final private boolean jj_3R_173() {
+    if (jj_scan_token(MINUS)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_170()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_129() {
+  final private boolean jj_3R_98() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_131()) {
+    if (jj_3R_107()) {
     jj_scanpos = xsp;
-    if (jj_3R_132()) return true;
-    }
-    return false;
-  }
-
-  final private boolean jj_3_6() {
-    if (jj_3R_19()) return true;
+    if (jj_3R_108()) {
+    jj_scanpos = xsp;
+    if (jj_3R_109()) {
+    jj_scanpos = xsp;
+    if (jj_3R_110()) {
+    jj_scanpos = xsp;
+    if (jj_3R_111()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_146() {
-    if (jj_3R_148()) return true;
+  final private boolean jj_3R_171() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_174()) {
+    jj_scanpos = xsp;
+    if (jj_3R_175()) {
+    jj_scanpos = xsp;
+    if (jj_3R_176()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_135() {
-    if (jj_scan_token(MOD)) return true;
-    if (jj_3R_129()) return true;
+  final private boolean jj_3R_172() {
+    if (jj_3R_177()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_145() {
-    if (jj_3R_147()) return true;
+  final private boolean jj_3R_153() {
+    if (jj_scan_token(86)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_134() {
-    if (jj_scan_token(DIV)) return true;
-    if (jj_3R_129()) return true;
+  final private boolean jj_3R_130() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_153()) jj_scanpos = xsp;
+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_133() {
-    if (jj_scan_token(89)) return true;
-    if (jj_3R_129()) return true;
+  final private boolean jj_3R_54() {
+    if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_142() {
+  final private boolean jj_3R_170() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_145()) {
+    if (jj_3R_172()) {
     jj_scanpos = xsp;
-    if (jj_3R_146()) return true;
-    }
+    if (jj_3R_173()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_140() {
-    if (jj_3R_142()) return true;
+  final private boolean jj_3R_53() {
+    if (jj_scan_token(FUNCTION_KEY)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_139() {
-    if (jj_3R_141()) return true;
+  final private boolean jj_3R_52() {
+    if (jj_scan_token(FUNCTION_ROUND)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_77() {
-    if (jj_scan_token(85)) return true;
-    if (jj_3R_70()) return true;
-    if (jj_scan_token(86)) return true;
+  final private boolean jj_3R_51() {
+    if (jj_scan_token(FUNCTION_CEILING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_127() {
-    if (jj_3R_129()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_130()) { jj_scanpos = xsp; break; }
-    }
+  final private boolean jj_3R_50() {
+    if (jj_scan_token(FUNCTION_FLOOR)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_137() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_139()) {
-    jj_scanpos = xsp;
-    if (jj_3R_140()) return true;
-    }
+  final private boolean jj_3R_49() {
+    if (jj_scan_token(FUNCTION_SUM)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_128() {
-    if (jj_scan_token(MINUS)) return true;
-    if (jj_3R_127()) return true;
+  final private boolean jj_3R_48() {
+    if (jj_scan_token(FUNCTION_NUMBER)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_112() {
-    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;
+  final private boolean jj_3R_176() {
+    if (jj_scan_token(MOD)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_170()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_111() {
-    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;
+  final private boolean jj_3R_47() {
+    if (jj_scan_token(FUNCTION_LANG)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_110() {
-    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;
+  final private boolean jj_3R_175() {
+    if (jj_scan_token(DIV)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_170()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_122() {
-    if (jj_scan_token(PLUS)) return true;
-    if (jj_3R_121()) return true;
+  final private boolean jj_3R_46() {
+    if (jj_scan_token(FUNCTION_NULL)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_109() {
-    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;
+  final private boolean jj_3R_174() {
+    if (jj_scan_token(88)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_170()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_108() {
-    if (jj_scan_token(AXIS_DESCENDANT)) return true;
+  final private boolean jj_3R_45() {
+    if (jj_scan_token(FUNCTION_FALSE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_107() {
-    if (jj_scan_token(AXIS_FOLLOWING)) return true;
+  final private boolean jj_3R_44() {
+    if (jj_scan_token(FUNCTION_TRUE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_106() {
-    if (jj_scan_token(AXIS_PRECEDING)) return true;
+  final private boolean jj_3R_43() {
+    if (jj_scan_token(FUNCTION_NOT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_121() {
-    if (jj_3R_127()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_128()) { jj_scanpos = xsp; break; }
-    }
+  final private boolean jj_3R_42() {
+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_105() {
-    if (jj_scan_token(AXIS_NAMESPACE)) return true;
+  final private boolean jj_3R_41() {
+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_104() {
-    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;
+  final private boolean jj_3R_116() {
+    if (jj_scan_token(84)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_104()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(85)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_103() {
-    if (jj_scan_token(AXIS_ANCESTOR)) return true;
+  final private boolean jj_3R_40() {
+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_39() {
+    if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_38() {
+    if (jj_scan_token(FUNCTION_SUBSTRING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_37() {
+    if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_36() {
+    if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_168() {
+    if (jj_3R_170()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_171()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
+    return false;
+  }
+
+  final private boolean jj_3R_35() {
+    if (jj_scan_token(FUNCTION_CONTAINS)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_34() {
+    if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_33() {
+    if (jj_scan_token(FUNCTION_CONCAT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_32() {
+    if (jj_scan_token(FUNCTION_STRING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_31() {
+    if (jj_scan_token(FUNCTION_NAME)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_30() {
+    if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_29() {
+    if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_169() {
+    if (jj_scan_token(MINUS)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_168()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_28() {
+    if (jj_scan_token(FUNCTION_ID)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_27() {
+    if (jj_scan_token(FUNCTION_COUNT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_152() {
+    if (jj_scan_token(AXIS_DESCENDANT_OR_SELF)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_26() {
+    if (jj_scan_token(FUNCTION_POSITION)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_25() {
+    if (jj_scan_token(FUNCTION_LAST)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_151() {
+    if (jj_scan_token(AXIS_PRECEDING_SIBLING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_24() {
+    if (jj_scan_token(PI)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_150() {
+    if (jj_scan_token(AXIS_FOLLOWING_SIBLING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_23() {
+    if (jj_scan_token(COMMENT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_149() {
+    if (jj_scan_token(AXIS_ANCESTOR_OR_SELF)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_163() {
+    if (jj_scan_token(PLUS)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_162()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_22() {
+    if (jj_scan_token(TEXT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_148() {
+    if (jj_scan_token(AXIS_DESCENDANT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_21() {
+    if (jj_scan_token(NODE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_147() {
+    if (jj_scan_token(AXIS_FOLLOWING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
   final private boolean jj_3R_20() {
-    if (jj_3R_64()) return true;
+    if (jj_3R_98()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_102() {
-    if (jj_scan_token(AXIS_PARENT)) return true;
+  final private boolean jj_3R_146() {
+    if (jj_scan_token(AXIS_PRECEDING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_101() {
-    if (jj_scan_token(AXIS_CHILD)) return true;
+  final private boolean jj_3R_145() {
+    if (jj_scan_token(AXIS_NAMESPACE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_100() {
-    if (jj_scan_token(AXIS_SELF)) return true;
+  final private boolean jj_3R_162() {
+    if (jj_3R_168()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_169()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
     return false;
   }
 
-  final private boolean jj_3R_138() {
-    if (jj_scan_token(UNION)) return true;
-    if (jj_3R_137()) return true;
+  final private boolean jj_3R_144() {
+    if (jj_scan_token(AXIS_ATTRIBUTE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_143() {
+    if (jj_scan_token(AXIS_ANCESTOR)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_142() {
+    if (jj_scan_token(AXIS_PARENT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
@@ -2177,902 +2447,1061 @@ specified to disambiguate the grammar:
     xsp = jj_scanpos;
     if (jj_3R_20()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(31)) {
-    jj_scanpos = xsp;
-    if (jj_scan_token(32)) {
+    if (jj_3R_21()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(33)) {
+    if (jj_3R_22()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(34)) {
+    if (jj_3R_23()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(48)) {
+    if (jj_3R_24()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(49)) {
+    if (jj_3R_25()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(50)) {
+    if (jj_3R_26()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(51)) {
+    if (jj_3R_27()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(53)) {
+    if (jj_3R_28()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(54)) {
+    if (jj_3R_29()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(55)) {
+    if (jj_3R_30()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(56)) {
+    if (jj_3R_31()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(57)) {
+    if (jj_3R_32()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(58)) {
+    if (jj_3R_33()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(59)) {
+    if (jj_3R_34()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(60)) {
+    if (jj_3R_35()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(61)) {
+    if (jj_3R_36()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(62)) {
+    if (jj_3R_37()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(63)) {
+    if (jj_3R_38()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(64)) {
+    if (jj_3R_39()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(65)) {
+    if (jj_3R_40()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(66)) {
+    if (jj_3R_41()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(67)) {
+    if (jj_3R_42()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(68)) {
+    if (jj_3R_43()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(69)) {
+    if (jj_3R_44()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(70)) {
+    if (jj_3R_45()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(71)) {
+    if (jj_3R_46()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(72)) {
+    if (jj_3R_47()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(73)) {
+    if (jj_3R_48()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(74)) {
+    if (jj_3R_49()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(75)) {
+    if (jj_3R_50()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(76)) {
+    if (jj_3R_51()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(77)) {
+    if (jj_3R_52()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(52)) {
+    if (jj_3R_53()) {
     jj_scanpos = xsp;
-    if (jj_scan_token(78)) return true;
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
+    if (jj_3R_54()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_90() {
+  final private boolean jj_3R_141() {
+    if (jj_scan_token(AXIS_CHILD)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_140() {
+    if (jj_scan_token(AXIS_SELF)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_129() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_100()) {
+    if (jj_3R_140()) {
     jj_scanpos = xsp;
-    if (jj_3R_101()) {
+    if (jj_3R_141()) {
     jj_scanpos = xsp;
-    if (jj_3R_102()) {
+    if (jj_3R_142()) {
     jj_scanpos = xsp;
-    if (jj_3R_103()) {
+    if (jj_3R_143()) {
     jj_scanpos = xsp;
-    if (jj_3R_104()) {
+    if (jj_3R_144()) {
     jj_scanpos = xsp;
-    if (jj_3R_105()) {
+    if (jj_3R_145()) {
     jj_scanpos = xsp;
-    if (jj_3R_106()) {
+    if (jj_3R_146()) {
     jj_scanpos = xsp;
-    if (jj_3R_107()) {
+    if (jj_3R_147()) {
     jj_scanpos = xsp;
-    if (jj_3R_108()) {
+    if (jj_3R_148()) {
     jj_scanpos = xsp;
-    if (jj_3R_109()) {
+    if (jj_3R_149()) {
     jj_scanpos = xsp;
-    if (jj_3R_110()) {
+    if (jj_3R_150()) {
     jj_scanpos = xsp;
-    if (jj_3R_111()) {
+    if (jj_3R_151()) {
     jj_scanpos = xsp;
-    if (jj_3R_112()) return true;
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
+    if (jj_3R_152()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_136() {
-    if (jj_3R_137()) return true;
+  final private boolean jj_3R_159() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_164()) {
+    jj_scanpos = xsp;
+    if (jj_3R_165()) {
+    jj_scanpos = xsp;
+    if (jj_3R_166()) {
+    jj_scanpos = xsp;
+    if (jj_3R_167()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_158() {
+    if (jj_3R_162()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_138()) { jj_scanpos = xsp; break; }
+      if (jj_3R_163()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     }
     return false;
   }
 
-  final private boolean jj_3R_118() {
+  final private boolean jj_3R_122() {
+    if (jj_3R_130()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_121() {
+    if (jj_3R_129()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_167() {
+    if (jj_scan_token(GTE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_158()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_112() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_123()) {
-    jj_scanpos = xsp;
-    if (jj_3R_124()) {
+    if (jj_3R_121()) {
     jj_scanpos = xsp;
-    if (jj_3R_125()) {
+    if (jj_3R_122()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_166() {
+    if (jj_scan_token(LTE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_158()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_165() {
+    if (jj_scan_token(GT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_158()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_157() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_160()) {
     jj_scanpos = xsp;
-    if (jj_3R_126()) return true;
-    }
-    }
+    if (jj_3R_161()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_164() {
+    if (jj_scan_token(LT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_158()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_156() {
+    if (jj_3R_158()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_159()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     }
     return false;
   }
 
-  final private boolean jj_3R_117() {
-    if (jj_3R_121()) return true;
+  final private boolean jj_3R_161() {
+    if (jj_scan_token(NEQ)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_156()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_160() {
+    if (jj_scan_token(EQ)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_156()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_102() {
+    if (jj_3R_116()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3_4() {
+    if (jj_scan_token(PI)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3_3() {
+    if (jj_3R_17()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(80)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(81)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_101() {
+    if (jj_scan_token(83)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_100() {
+    if (jj_scan_token(82)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_115() {
+    if (jj_3R_123()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_134() {
+    if (jj_3R_156()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_122()) { jj_scanpos = xsp; break; }
+      if (jj_3R_157()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     }
     return false;
   }
 
-  final private boolean jj_3R_83() {
-    if (jj_3R_91()) return true;
+  final private boolean jj_3R_114() {
+    if (jj_scan_token(PI)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(80)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(Literal)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(81)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_82() {
-    if (jj_3R_90()) return true;
+  final private boolean jj_3R_113() {
+    if (jj_3R_17()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(80)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(81)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_96() {
-    if (jj_3R_70()) return true;
+  final private boolean jj_3R_99() {
+    if (jj_3R_112()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_113()) {
+    jj_scanpos = xsp;
+    if (jj_3R_114()) {
+    jj_scanpos = xsp;
+    if (jj_3R_115()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_126() {
-    if (jj_scan_token(GTE)) return true;
-    if (jj_3R_117()) return true;
+  final private boolean jj_3R_135() {
+    if (jj_scan_token(AND)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_134()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_57() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_99()) {
+    jj_scanpos = xsp;
+    if (jj_3R_100()) {
+    jj_scanpos = xsp;
+    if (jj_3R_101()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_102()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
+    return false;
+  }
+
+  final private boolean jj_3R_125() {
+    if (jj_3R_134()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_135()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
     return false;
   }
 
-  final private boolean jj_3R_97() {
-    if (jj_scan_token(88)) return true;
-    if (jj_3R_96()) return true;
+  final private boolean jj_3R_193() {
+    if (jj_3R_16()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_125() {
-    if (jj_scan_token(LTE)) return true;
-    if (jj_3R_117()) return true;
+  final private boolean jj_3R_56() {
+    if (jj_scan_token(SLASHSLASH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_73() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_82()) {
-    jj_scanpos = xsp;
-    if (jj_3R_83()) return true;
-    }
+  final private boolean jj_3R_55() {
+    if (jj_scan_token(SLASH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_124() {
-    if (jj_scan_token(GT)) return true;
-    if (jj_3R_117()) return true;
+  final private boolean jj_3R_126() {
+    if (jj_scan_token(OR)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_125()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_116() {
+  final private boolean jj_3R_16() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_119()) {
+    if (jj_3R_55()) {
     jj_scanpos = xsp;
-    if (jj_3R_120()) return true;
-    }
+    if (jj_3R_56()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_57()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_123() {
-    if (jj_scan_token(LT)) return true;
-    if (jj_3R_117()) return true;
+  final private boolean jj_3R_190() {
+    if (jj_3R_16()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_88() {
-    if (jj_3R_96()) return true;
+  final private boolean jj_3R_118() {
+    if (jj_3R_125()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_97()) { jj_scanpos = xsp; break; }
+      if (jj_3R_126()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     }
     return false;
   }
 
-  final private boolean jj_3R_115() {
-    if (jj_3R_117()) return true;
+  final private boolean jj_3R_188() {
+    if (jj_3R_57()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_118()) { jj_scanpos = xsp; break; }
+      if (jj_3R_190()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     }
     return false;
   }
 
-  final private boolean jj_3R_26() {
-    if (jj_scan_token(PI)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_80() {
-    if (jj_scan_token(81)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_88()) jj_scanpos = xsp;
-    if (jj_scan_token(82)) return true;
+  final private boolean jj_3_2() {
+    if (jj_3R_16()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_25() {
-    if (jj_scan_token(COMMENT)) return true;
+  final private boolean jj_3R_185() {
+    if (jj_3R_16()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_24() {
-    if (jj_scan_token(NODE)) return true;
+  final private boolean jj_3R_192() {
+    if (jj_scan_token(SLASH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_120() {
-    if (jj_scan_token(NEQ)) return true;
-    if (jj_3R_115()) return true;
+  final private boolean jj_3R_191() {
+    if (jj_3R_16()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_193()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
     return false;
   }
 
-  final private boolean jj_3R_23() {
-    if (jj_scan_token(TEXT)) return true;
+  final private boolean jj_3R_184() {
+    if (jj_3R_116()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_119() {
-    if (jj_scan_token(EQ)) return true;
-    if (jj_3R_115()) return true;
+  final private boolean jj_3R_189() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_191()) {
+    jj_scanpos = xsp;
+    if (jj_3R_192()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_68() {
-    if (jj_3R_77()) return true;
+  final private boolean jj_3R_182() {
+    if (jj_3R_19()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_184()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_185()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
     return false;
   }
 
-  final private boolean jj_3_1() {
-    if (jj_3R_15()) return true;
-    if (jj_scan_token(80)) return true;
+  final private boolean jj_3_6() {
+    if (jj_3R_19()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3_4() {
-    if (jj_scan_token(PI)) return true;
+  final private boolean jj_3R_187() {
+    if (jj_3R_189()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3_3() {
-    if (jj_3R_17()) return true;
-    if (jj_scan_token(81)) return true;
-    if (jj_scan_token(82)) return true;
+  final private boolean jj_3R_186() {
+    if (jj_3R_188()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_17() {
+  final private boolean jj_3R_183() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_23()) {
-    jj_scanpos = xsp;
-    if (jj_3R_24()) {
-    jj_scanpos = xsp;
-    if (jj_3R_25()) {
+    if (jj_3R_186()) {
     jj_scanpos = xsp;
-    if (jj_3R_26()) return true;
-    }
-    }
-    }
+    if (jj_3R_187()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_67() {
-    if (jj_scan_token(84)) return true;
+  final private boolean jj_3R_181() {
+    if (jj_3R_183()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_114() {
-    if (jj_3R_15()) return true;
+  final private boolean jj_3R_180() {
+    if (jj_3R_182()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_66() {
-    if (jj_scan_token(83)) return true;
+  final private boolean jj_3R_178() {
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_180()) {
+    jj_scanpos = xsp;
+    if (jj_3R_181()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_94() {
-    if (jj_3R_115()) return true;
+  final private boolean jj_3R_179() {
+    if (jj_scan_token(UNION)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_178()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_177() {
+    if (jj_3R_178()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     while (true) {
       xsp = jj_scanpos;
-      if (jj_3R_116()) { jj_scanpos = xsp; break; }
+      if (jj_3R_179()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     }
     return false;
   }
 
-  final private boolean jj_3R_76() {
-    if (jj_3R_84()) return true;
+  final private boolean jj_3R_136() {
+    if (jj_3R_104()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_99() {
-    if (jj_3R_64()) return true;
+  final private boolean jj_3R_137() {
+    if (jj_scan_token(87)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_136()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_98() {
-    if (jj_3R_15()) return true;
+  final private boolean jj_3R_127() {
+    if (jj_3R_136()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    while (true) {
+      xsp = jj_scanpos;
+      if (jj_3R_137()) { jj_scanpos = xsp; break; }
+      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    }
+    return false;
+  }
+
+  final private boolean jj_3R_119() {
     if (jj_scan_token(80)) return true;
-    if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    Token xsp;
+    xsp = jj_scanpos;
+    if (jj_3R_127()) jj_scanpos = xsp;
+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(81)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_75() {
+  final private boolean jj_3R_61() {
     if (jj_scan_token(PI)) return true;
-    if (jj_scan_token(81)) return true;
-    if (jj_scan_token(Literal)) return true;
-    if (jj_scan_token(82)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_92() {
-    if (jj_3R_15()) return true;
+  final private boolean jj_3R_60() {
+    if (jj_scan_token(COMMENT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_74() {
-    if (jj_3R_17()) return true;
-    if (jj_scan_token(81)) return true;
-    if (jj_scan_token(82)) return true;
+  final private boolean jj_3R_59() {
+    if (jj_scan_token(NODE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_71() {
-    if (jj_3R_18()) return true;
-    if (jj_3R_80()) return true;
+  final private boolean jj_3R_58() {
+    if (jj_scan_token(TEXT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_93() {
-    if (jj_scan_token(80)) return true;
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(89)) {
-    jj_scanpos = xsp;
-    if (jj_3R_114()) return true;
-    }
+  final private boolean jj_3_1() {
+    if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(79)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_65() {
-    if (jj_3R_73()) return true;
+  final private boolean jj_3R_17() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_74()) {
+    if (jj_3R_58()) {
     jj_scanpos = xsp;
-    if (jj_3R_75()) {
+    if (jj_3R_59()) {
     jj_scanpos = xsp;
-    if (jj_3R_76()) return true;
-    }
-    }
+    if (jj_3R_60()) {
+    jj_scanpos = xsp;
+    if (jj_3R_61()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_85() {
-    if (jj_scan_token(80)) return true;
+  final private boolean jj_3R_155() {
     if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_89() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_98()) {
-    jj_scanpos = xsp;
-    if (jj_3R_99()) return true;
-    }
+  final private boolean jj_3R_139() {
+    if (jj_3R_98()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_95() {
-    if (jj_scan_token(AND)) return true;
-    if (jj_3R_94()) return true;
+  final private boolean jj_3R_138() {
+    if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(79)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_84() {
+  final private boolean jj_3R_154() {
+    if (jj_scan_token(88)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_132() {
+    if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_105() {
+    if (jj_3R_18()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_119()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_124() {
+    if (jj_scan_token(79)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_133() {
+    if (jj_scan_token(79)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(89)) {
+    if (jj_3R_154()) {
     jj_scanpos = xsp;
-    if (jj_3R_92()) return true;
-    }
-    xsp = jj_scanpos;
-    if (jj_3R_93()) jj_scanpos = xsp;
+    if (jj_3R_155()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_22() {
+  final private boolean jj_3R_128() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_65()) {
-    jj_scanpos = xsp;
-    if (jj_3R_66()) {
+    if (jj_3R_138()) {
     jj_scanpos = xsp;
-    if (jj_3R_67()) return true;
-    }
-    }
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_68()) { jj_scanpos = xsp; break; }
-    }
+    if (jj_3R_139()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_72() {
-    if (jj_3R_81()) return true;
-    if (jj_3R_80()) return true;
+  final private boolean jj_3R_131() {
+    if (jj_scan_token(88)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_86() {
-    if (jj_3R_94()) return true;
+  final private boolean jj_3R_123() {
     Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_95()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
-  final private boolean jj_3R_151() {
-    if (jj_3R_16()) return true;
+    xsp = jj_scanpos;
+    if (jj_3R_131()) {
+    jj_scanpos = xsp;
+    if (jj_3R_132()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    xsp = jj_scanpos;
+    if (jj_3R_133()) jj_scanpos = xsp;
+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3_5() {
-    if (jj_3R_18()) return true;
-    if (jj_scan_token(81)) return true;
+  final private boolean jj_3R_106() {
+    if (jj_3R_120()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_119()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_78() {
+  final private boolean jj_3R_117() {
     if (jj_3R_15()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_85()) jj_scanpos = xsp;
+    if (jj_3R_124()) jj_scanpos = xsp;
+    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_69() {
+  final private boolean jj_3_5() {
+    if (jj_3R_18()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(80)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    return false;
+  }
+
+  final private boolean jj_3R_103() {
     if (jj_scan_token(VARIABLE)) return true;
-    if (jj_3R_78()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_117()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_57() {
+  final private boolean jj_3R_91() {
     if (jj_scan_token(FUNCTION_FORMAT_NUMBER)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_56() {
+  final private boolean jj_3R_90() {
     if (jj_scan_token(FUNCTION_KEY)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_55() {
+  final private boolean jj_3R_89() {
     if (jj_scan_token(FUNCTION_ROUND)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_63() {
-    if (jj_3R_72()) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_54() {
+  final private boolean jj_3R_88() {
     if (jj_scan_token(FUNCTION_CEILING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_62() {
-    if (jj_3R_71()) return true;
+  final private boolean jj_3R_97() {
+    if (jj_3R_106()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_53() {
+  final private boolean jj_3R_87() {
     if (jj_scan_token(FUNCTION_FLOOR)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_61() {
-    if (jj_scan_token(Number)) return true;
+  final private boolean jj_3R_96() {
+    if (jj_3R_105()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_52() {
+  final private boolean jj_3R_86() {
     if (jj_scan_token(FUNCTION_SUM)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_21() {
-    if (jj_scan_token(SLASHSLASH)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_60() {
-    if (jj_scan_token(Literal)) return true;
+  final private boolean jj_3R_95() {
+    if (jj_scan_token(Number)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_51() {
+  final private boolean jj_3R_85() {
     if (jj_scan_token(FUNCTION_NUMBER)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_59() {
-    if (jj_scan_token(81)) return true;
-    if (jj_3R_70()) return true;
-    if (jj_scan_token(82)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_87() {
-    if (jj_scan_token(OR)) return true;
-    if (jj_3R_86()) return true;
+  final private boolean jj_3R_94() {
+    if (jj_scan_token(Literal)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_50() {
+  final private boolean jj_3R_84() {
     if (jj_scan_token(FUNCTION_LANG)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_58() {
-    if (jj_3R_69()) return true;
+  final private boolean jj_3R_93() {
+    if (jj_scan_token(80)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_3R_104()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    if (jj_scan_token(81)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_81() {
-    if (jj_3R_89()) return true;
+  final private boolean jj_3R_83() {
+    if (jj_scan_token(FUNCTION_NULL)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_49() {
-    if (jj_scan_token(FUNCTION_NULL)) return true;
+  final private boolean jj_3R_92() {
+    if (jj_3R_103()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_48() {
+  final private boolean jj_3R_82() {
     if (jj_scan_token(FUNCTION_FALSE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_47() {
+  final private boolean jj_3R_81() {
     if (jj_scan_token(FUNCTION_TRUE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_46() {
-    if (jj_scan_token(FUNCTION_NOT)) return true;
+  final private boolean jj_3R_120() {
+    if (jj_3R_128()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_16() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_scan_token(6)) {
-    jj_scanpos = xsp;
-    if (jj_3R_21()) return true;
-    }
-    if (jj_3R_22()) return true;
+  final private boolean jj_3R_80() {
+    if (jj_scan_token(FUNCTION_NOT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_149() {
-    if (jj_3R_16()) return true;
+  final private boolean jj_3R_79() {
+    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_45() {
-    if (jj_scan_token(FUNCTION_BOOLEAN)) return true;
+  final private boolean jj_3R_78() {
+    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_44() {
-    if (jj_scan_token(FUNCTION_TRANSLATE)) return true;
+  final private boolean jj_3R_77() {
+    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
   final private boolean jj_3R_19() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_3R_58()) {
+    if (jj_3R_92()) {
     jj_scanpos = xsp;
-    if (jj_3R_59()) {
+    if (jj_3R_93()) {
     jj_scanpos = xsp;
-    if (jj_3R_60()) {
+    if (jj_3R_94()) {
     jj_scanpos = xsp;
-    if (jj_3R_61()) {
+    if (jj_3R_95()) {
     jj_scanpos = xsp;
-    if (jj_3R_62()) {
+    if (jj_3R_96()) {
     jj_scanpos = xsp;
-    if (jj_3R_63()) return true;
-    }
-    }
-    }
-    }
-    }
-    return false;
-  }
-
-  final private boolean jj_3R_43() {
-    if (jj_scan_token(FUNCTION_NORMALIZE_SPACE)) return true;
+    if (jj_3R_97()) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
+    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_42() {
+  final private boolean jj_3R_76() {
     if (jj_scan_token(FUNCTION_STRING_LENGTH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_41() {
+  final private boolean jj_3R_75() {
     if (jj_scan_token(FUNCTION_SUBSTRING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_40() {
+  final private boolean jj_3R_74() {
     if (jj_scan_token(FUNCTION_SUBSTRING_AFTER)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_79() {
-    if (jj_3R_86()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_87()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
-  final private boolean jj_3R_39() {
+  final private boolean jj_3R_73() {
     if (jj_scan_token(FUNCTION_SUBSTRING_BEFORE)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_38() {
+  final private boolean jj_3R_72() {
     if (jj_scan_token(FUNCTION_CONTAINS)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_37() {
-    if (jj_scan_token(FUNCTION_ENDS_WITH)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_36() {
+  final private boolean jj_3R_71() {
     if (jj_scan_token(FUNCTION_STARTS_WITH)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_35() {
+  final private boolean jj_3R_70() {
     if (jj_scan_token(FUNCTION_CONCAT)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_34() {
+  final private boolean jj_3R_69() {
     if (jj_scan_token(FUNCTION_STRING)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_33() {
+  final private boolean jj_3R_68() {
     if (jj_scan_token(FUNCTION_NAME)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_32() {
+  final private boolean jj_3R_67() {
     if (jj_scan_token(FUNCTION_NAMESPACE_URI)) return true;
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
-  final private boolean jj_3R_31() {
+  final private boolean jj_3R_66() {
     if (jj_scan_token(FUNCTION_LOCAL_NAME)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_70() {
-    if (jj_3R_79()) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_30() {
-    if (jj_scan_token(FUNCTION_ID)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_29() {
-    if (jj_scan_token(FUNCTION_COUNT)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_28() {
-    if (jj_scan_token(FUNCTION_POSITION)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_27() {
-    if (jj_scan_token(FUNCTION_LAST)) return true;
-    return false;
-  }
-
-  final private boolean jj_3R_147() {
-    if (jj_3R_22()) return true;
-    Token xsp;
-    while (true) {
-      xsp = jj_scanpos;
-      if (jj_3R_149()) { jj_scanpos = xsp; break; }
-    }
-    return false;
-  }
-
-  final private boolean jj_3R_18() {
-    Token xsp;
-    xsp = jj_scanpos;
-    if (jj_3R_27()) {
-    jj_scanpos = xsp;
-    if (jj_3R_28()) {
-    jj_scanpos = xsp;
-    if (jj_3R_29()) {
-    jj_scanpos = xsp;
-    if (jj_3R_30()) {
-    jj_scanpos = xsp;
-    if (jj_3R_31()) {
-    jj_scanpos = xsp;
-    if (jj_3R_32()) {
-    jj_scanpos = xsp;
-    if (jj_3R_33()) {
-    jj_scanpos = xsp;
-    if (jj_3R_34()) {
-    jj_scanpos = xsp;
-    if (jj_3R_35()) {
-    jj_scanpos = xsp;
-    if (jj_3R_36()) {
-    jj_scanpos = xsp;
-    if (jj_3R_37()) {
-    jj_scanpos = xsp;
-    if (jj_3R_38()) {
-    jj_scanpos = xsp;
-    if (jj_3R_39()) {
-    jj_scanpos = xsp;
-    if (jj_3R_40()) {
-    jj_scanpos = xsp;
-    if (jj_3R_41()) {
-    jj_scanpos = xsp;
-    if (jj_3R_42()) {
-    jj_scanpos = xsp;
-    if (jj_3R_43()) {
-    jj_scanpos = xsp;
-    if (jj_3R_44()) {
-    jj_scanpos = xsp;
-    if (jj_3R_45()) {
-    jj_scanpos = xsp;
-    if (jj_3R_46()) {
-    jj_scanpos = xsp;
-    if (jj_3R_47()) {
-    jj_scanpos = xsp;
-    if (jj_3R_48()) {
-    jj_scanpos = xsp;
-    if (jj_3R_49()) {
-    jj_scanpos = xsp;
-    if (jj_3R_50()) {
-    jj_scanpos = xsp;
-    if (jj_3R_51()) {
-    jj_scanpos = xsp;
-    if (jj_3R_52()) {
-    jj_scanpos = xsp;
-    if (jj_3R_53()) {
-    jj_scanpos = xsp;
-    if (jj_3R_54()) {
-    jj_scanpos = xsp;
-    if (jj_3R_55()) {
-    jj_scanpos = xsp;
-    if (jj_3R_56()) {
-    jj_scanpos = xsp;
-    if (jj_3R_57()) return true;
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
-    }
+    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
     return false;
   }
 
@@ -3100,7 +3529,7 @@ specified to disambiguate the grammar:
       jj_la1_1 = new int[] {0xffff0007,0x0,0xffff0000,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffff0007,0xffffffff,0x0,0xfff8,0xfff8,0x0,0x0,0xffff0007,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffff0007,0xffff0007,0x0,0x7,};
    }
    private static void jj_la1_2() {
-      jj_la1_2 = new int[] {0xffff,0x8000,0x7fff,0x10000,0x8000,0x298ffff,0x0,0x0,0x0,0x0,0x200ffff,0x298ffff,0x200000,0x0,0x0,0x800000,0x20000,0xffff,0x1000000,0x29affff,0x0,0x298ffff,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x29affff,0x200ffff,0x200ffff,0x10000,0x0,};
+      jj_la1_2 = new int[] {0x7fff,0x4000,0x3fff,0x8000,0x4000,0x14c7fff,0x0,0x0,0x0,0x0,0x1007fff,0x14c7fff,0x100000,0x0,0x0,0x400000,0x10000,0x7fff,0x800000,0x14d7fff,0x0,0x14c7fff,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x14d7fff,0x1007fff,0x1007fff,0x8000,0x0,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[6];
   private boolean jj_rescan = false;
@@ -3188,8 +3617,6 @@ specified to disambiguate the grammar:
     throw generateParseException();
   }
 
-  static private final class LookaheadSuccess extends java.lang.Error { }
-  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
   final private boolean jj_scan_token(int kind) {
     if (jj_scanpos == jj_lastpos) {
       jj_la--;
@@ -3206,9 +3633,7 @@ specified to disambiguate the grammar:
       while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
       if (tok != null) jj_add_error_token(kind, i);
     }
-    if (jj_scanpos.kind != kind) return true;
-    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
-    return false;
+    return (jj_scanpos.kind != kind);
   }
 
   final public Token getNextToken() {
@@ -3243,8 +3668,8 @@ specified to disambiguate the grammar:
         jj_expentry[i] = jj_lasttokens[i];
       }
       boolean exists = false;
-      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
-        int[] oldentry = (int[])(e.nextElement());
+      for (java.util.Enumeration en = jj_expentries.elements(); en.hasMoreElements();) {
+        int[] oldentry = (int[])(en.nextElement());
         if (oldentry.length == jj_expentry.length) {
           exists = true;
           for (int i = 0; i < jj_expentry.length; i++) {
@@ -3263,8 +3688,8 @@ specified to disambiguate the grammar:
 
   public ParseException generateParseException() {
     jj_expentries.removeAllElements();
-    boolean[] la1tokens = new boolean[90];
-    for (int i = 0; i < 90; i++) {
+    boolean[] la1tokens = new boolean[89];
+    for (int i = 0; i < 89; i++) {
       la1tokens[i] = false;
     }
     if (jj_kind >= 0) {
@@ -3286,7 +3711,7 @@ specified to disambiguate the grammar:
         }
       }
     }
-    for (int i = 0; i < 90; i++) {
+    for (int i = 0; i < 89; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;
diff --git a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java
index d5ce2e1..4db373a 100644
--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java
+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserConstants.java
@@ -57,27 +57,26 @@ public interface XPathParserConstants {
   int FUNCTION_STRING = 56;
   int FUNCTION_CONCAT = 57;
   int FUNCTION_STARTS_WITH = 58;
-  int FUNCTION_ENDS_WITH = 59;
-  int FUNCTION_CONTAINS = 60;
-  int FUNCTION_SUBSTRING_BEFORE = 61;
-  int FUNCTION_SUBSTRING_AFTER = 62;
-  int FUNCTION_SUBSTRING = 63;
-  int FUNCTION_STRING_LENGTH = 64;
-  int FUNCTION_NORMALIZE_SPACE = 65;
-  int FUNCTION_TRANSLATE = 66;
-  int FUNCTION_BOOLEAN = 67;
-  int FUNCTION_NOT = 68;
-  int FUNCTION_TRUE = 69;
-  int FUNCTION_FALSE = 70;
-  int FUNCTION_NULL = 71;
-  int FUNCTION_LANG = 72;
-  int FUNCTION_NUMBER = 73;
-  int FUNCTION_SUM = 74;
-  int FUNCTION_FLOOR = 75;
-  int FUNCTION_CEILING = 76;
-  int FUNCTION_ROUND = 77;
-  int FUNCTION_FORMAT_NUMBER = 78;
-  int NCName = 79;
+  int FUNCTION_CONTAINS = 59;
+  int FUNCTION_SUBSTRING_BEFORE = 60;
+  int FUNCTION_SUBSTRING_AFTER = 61;
+  int FUNCTION_SUBSTRING = 62;
+  int FUNCTION_STRING_LENGTH = 63;
+  int FUNCTION_NORMALIZE_SPACE = 64;
+  int FUNCTION_TRANSLATE = 65;
+  int FUNCTION_BOOLEAN = 66;
+  int FUNCTION_NOT = 67;
+  int FUNCTION_TRUE = 68;
+  int FUNCTION_FALSE = 69;
+  int FUNCTION_NULL = 70;
+  int FUNCTION_LANG = 71;
+  int FUNCTION_NUMBER = 72;
+  int FUNCTION_SUM = 73;
+  int FUNCTION_FLOOR = 74;
+  int FUNCTION_CEILING = 75;
+  int FUNCTION_ROUND = 76;
+  int FUNCTION_FORMAT_NUMBER = 77;
+  int NCName = 78;
 
   int DEFAULT = 0;
 
@@ -141,7 +140,6 @@ public interface XPathParserConstants {
     "\"string\"",
     "\"concat\"",
     "\"starts-with\"",
-    "\"ends-with\"",
     "\"contains\"",
     "\"substring-before\"",
     "\"substring-after\"",
diff --git a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
index 15dcb1c..3c894af 100644
--- a/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
+++ b/src/java/org/apache/commons/jxpath/ri/parser/XPathParserTokenManager.java
@@ -12,74 +12,74 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
    switch (pos)
    {
       case 0:
-         if ((active1 & 0x180000L) != 0L)
+         if ((active1 & 0xc0000L) != 0L)
             return 10;
-         if ((active0 & 0xfffffffff8000000L) != 0L || (active1 & 0x7fffL) != 0L)
+         if ((active0 & 0xfffffffff8000000L) != 0L || (active1 & 0x3fffL) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             return 12;
          }
          return -1;
       case 1:
-         if ((active0 & 0xfff7fffff0000000L) != 0L || (active1 & 0x7fffL) != 0L)
+         if ((active0 & 0x8000008000000L) != 0L)
+            return 12;
+         if ((active0 & 0xfff7fffff0000000L) != 0L || (active1 & 0x3fffL) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 1;
             return 12;
          }
-         if ((active0 & 0x8000008000000L) != 0L)
-            return 12;
          return -1;
       case 2:
-         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x410L) != 0L)
+         if ((active0 & 0x10000070000000L) != 0L || (active1 & 0x208L) != 0L)
             return 12;
-         if ((active0 & 0xffe7ffff80000000L) != 0L || (active1 & 0x7befL) != 0L)
+         if ((active0 & 0xffe7ffff80000000L) != 0L || (active1 & 0x3df7L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 2;
             return 12;
          }
          return -1;
       case 3:
-         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0x1a0L) != 0L)
+         if ((active0 & 0xc1010180000000L) != 0L || (active1 & 0xd0L) != 0L)
             return 12;
-         if ((active0 & 0xff26fefe00000000L) != 0L || (active1 & 0x7a4fL) != 0L)
+         if ((active0 & 0xff26fefe00000000L) != 0L || (active1 & 0x3d27L) != 0L)
          {
             if (jjmatchedPos != 3)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 3;
             }
             return 12;
          }
          return -1;
       case 4:
-         if ((active0 & 0xff62fff600000000L) != 0L || (active1 & 0x520fL) != 0L)
+         if ((active0 & 0xff62fff600000000L) != 0L || (active1 & 0x2907L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 4;
             return 12;
          }
-         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2840L) != 0L)
+         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1420L) != 0L)
             return 12;
          if ((active0 & 0x800000000L) != 0L)
          {
             if (jjmatchedPos < 3)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 3;
             }
             return -1;
          }
          return -1;
       case 5:
-         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x201L) != 0L)
+         if ((active0 & 0x8300000000000000L) != 0L || (active1 & 0x100L) != 0L)
             return 12;
-         if ((active0 & 0xfc62ffe600000000L) != 0L || (active1 & 0x500eL) != 0L)
+         if ((active0 & 0x7c62ffe600000000L) != 0L || (active1 & 0x2807L) != 0L)
          {
             if (jjmatchedPos != 5)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 5;
             }
             return 12;
@@ -88,7 +88,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 4;
             }
             return -1;
@@ -97,26 +97,20 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 3)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 3;
             }
             return -1;
          }
          return -1;
       case 6:
-         if ((active0 & 0x200000000L) != 0L || (active1 & 0x1008L) != 0L)
+         if ((active0 & 0x200000000L) != 0L || (active1 & 0x804L) != 0L)
             return 12;
-         if ((active0 & 0xfc62ffc400000000L) != 0L || (active1 & 0x4007L) != 0L)
-         {
-            jjmatchedKind = 79;
-            jjmatchedPos = 6;
-            return 12;
-         }
          if ((active0 & 0x2000000000L) != 0L)
          {
             if (jjmatchedPos < 5)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 5;
             }
             return -1;
@@ -125,52 +119,58 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 4)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 4;
             }
             return -1;
          }
+         if ((active0 & 0xfc62ffc400000000L) != 0L || (active1 & 0x2003L) != 0L)
+         {
+            jjmatchedKind = 78;
+            jjmatchedPos = 6;
+            return 12;
+         }
          return -1;
       case 7:
-         if ((active0 & 0x1002000000000000L) != 0L)
+         if ((active0 & 0xf460ffc400000000L) != 0L || (active1 & 0x2003L) != 0L)
+         {
+            jjmatchedKind = 78;
+            jjmatchedPos = 7;
+            return 12;
+         }
+         if ((active0 & 0x802000000000000L) != 0L)
             return 12;
          if ((active0 & 0x2000000000L) != 0L)
          {
             if (jjmatchedPos < 5)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 5;
             }
             return -1;
          }
-         if ((active0 & 0xec60ffc400000000L) != 0L || (active1 & 0x4007L) != 0L)
-         {
-            jjmatchedKind = 79;
-            jjmatchedPos = 7;
-            return 12;
-         }
          return -1;
       case 8:
-         if ((active0 & 0xe800000000000000L) != 0L || (active1 & 0x4L) != 0L)
-            return 12;
-         if ((active0 & 0x460ff8400000000L) != 0L || (active1 & 0x4003L) != 0L)
-         {
-            if (jjmatchedPos != 8)
-            {
-               jjmatchedKind = 79;
-               jjmatchedPos = 8;
-            }
+         if ((active0 & 0x7000000000000000L) != 0L || (active1 & 0x2L) != 0L)
             return 12;
-         }
          if ((active0 & 0x4000000000L) != 0L)
          {
             if (jjmatchedPos < 7)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 7;
             }
             return -1;
          }
+         if ((active0 & 0x8460ff8400000000L) != 0L || (active1 & 0x2001L) != 0L)
+         {
+            if (jjmatchedPos != 8)
+            {
+               jjmatchedKind = 78;
+               jjmatchedPos = 8;
+            }
+            return 12;
+         }
          return -1;
       case 9:
          if ((active0 & 0x20000000000000L) != 0L)
@@ -179,7 +179,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 8)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 8;
             }
             return -1;
@@ -188,14 +188,14 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 7)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 7;
             }
             return -1;
          }
-         if ((active0 & 0x6440f80400000000L) != 0L || (active1 & 0x4003L) != 0L)
+         if ((active0 & 0xb440f80400000000L) != 0L || (active1 & 0x2001L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 9;
             return 12;
          }
@@ -203,17 +203,11 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
       case 10:
          if ((active0 & 0x400000000000000L) != 0L)
             return 12;
-         if ((active0 & 0x6040f00400000000L) != 0L || (active1 & 0x4003L) != 0L)
-         {
-            jjmatchedKind = 79;
-            jjmatchedPos = 10;
-            return 12;
-         }
          if ((active0 & 0x80000000000L) != 0L)
          {
             if (jjmatchedPos < 9)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 9;
             }
             return -1;
@@ -222,63 +216,69 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 8)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 8;
             }
             return -1;
          }
+         if ((active0 & 0xb040f00400000000L) != 0L || (active1 & 0x2001L) != 0L)
+         {
+            jjmatchedKind = 78;
+            jjmatchedPos = 10;
+            return 12;
+         }
          return -1;
       case 11:
+         if ((active0 & 0xb040f00400000000L) != 0L || (active1 & 0x2001L) != 0L)
+         {
+            jjmatchedKind = 78;
+            jjmatchedPos = 11;
+            return 12;
+         }
          if ((active0 & 0x80000000000L) != 0L)
          {
             if (jjmatchedPos < 9)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 9;
             }
             return -1;
          }
-         if ((active0 & 0x6040f00400000000L) != 0L || (active1 & 0x4003L) != 0L)
-         {
-            jjmatchedKind = 79;
-            jjmatchedPos = 11;
-            return 12;
-         }
          return -1;
       case 12:
-         if ((active0 & 0x6000f00400000000L) != 0L || (active1 & 0x2L) != 0L)
+         if ((active0 & 0x8040000000000000L) != 0L || (active1 & 0x2000L) != 0L)
+            return 12;
+         if ((active0 & 0x3000f00400000000L) != 0L || (active1 & 0x1L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 12;
             return 12;
          }
-         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4001L) != 0L)
-            return 12;
          return -1;
       case 13:
-         if ((active0 & 0x6000f00400000000L) != 0L || (active1 & 0x2L) != 0L)
+         if ((active0 & 0x3000f00400000000L) != 0L || (active1 & 0x1L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 13;
             return 12;
          }
          return -1;
       case 14:
-         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2L) != 0L)
+         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x1L) != 0L)
             return 12;
-         if ((active0 & 0x2000f00400000000L) != 0L)
+         if ((active0 & 0x1000f00400000000L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 14;
             return 12;
          }
          return -1;
       case 15:
-         if ((active0 & 0x2000000000000000L) != 0L)
+         if ((active0 & 0x1000000000000000L) != 0L)
             return 12;
          if ((active0 & 0xf00400000000L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 15;
             return 12;
          }
@@ -286,7 +286,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
       case 16:
          if ((active0 & 0xe00400000000L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 16;
             return 12;
          }
@@ -294,7 +294,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 15)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 15;
             }
             return -1;
@@ -305,7 +305,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 16)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 16;
             }
             return -1;
@@ -314,24 +314,30 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 15)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 15;
             }
             return -1;
          }
          if ((active0 & 0x800400000000L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 17;
             return 12;
          }
          return -1;
       case 18:
+         if ((active0 & 0x400000000L) != 0L)
+         {
+            jjmatchedKind = 78;
+            jjmatchedPos = 18;
+            return 12;
+         }
          if ((active0 & 0x800000000000L) != 0L)
          {
             if (jjmatchedPos < 17)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 17;
             }
             return -1;
@@ -340,22 +346,16 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 16)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 16;
             }
             return -1;
          }
-         if ((active0 & 0x400000000L) != 0L)
-         {
-            jjmatchedKind = 79;
-            jjmatchedPos = 18;
-            return 12;
-         }
          return -1;
       case 19:
          if ((active0 & 0x400000000L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 19;
             return 12;
          }
@@ -363,7 +363,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
          {
             if (jjmatchedPos < 17)
             {
-               jjmatchedKind = 79;
+               jjmatchedKind = 78;
                jjmatchedPos = 17;
             }
             return -1;
@@ -372,7 +372,7 @@ private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
       case 20:
          if ((active0 & 0x400000000L) != 0L)
          {
-            jjmatchedKind = 79;
+            jjmatchedKind = 78;
             jjmatchedPos = 20;
             return 12;
          }
@@ -408,25 +408,25 @@ private final int jjMoveStringLiteralDfa0_0()
       case 36:
          return jjStopAtPos(0, 17);
       case 40:
-         return jjStopAtPos(0, 81);
+         return jjStopAtPos(0, 80);
       case 41:
-         return jjStopAtPos(0, 82);
+         return jjStopAtPos(0, 81);
       case 42:
-         return jjStopAtPos(0, 89);
+         return jjStopAtPos(0, 88);
       case 43:
          return jjStopAtPos(0, 9);
       case 44:
-         return jjStopAtPos(0, 88);
+         return jjStopAtPos(0, 87);
       case 45:
          return jjStopAtPos(0, 10);
       case 46:
-         jjmatchedKind = 83;
-         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
+         jjmatchedKind = 82;
+         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
       case 47:
          jjmatchedKind = 6;
          return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
       case 58:
-         return jjStopAtPos(0, 80);
+         return jjStopAtPos(0, 79);
       case 60:
          jjmatchedKind = 13;
          return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
@@ -436,43 +436,41 @@ private final int jjMoveStringLiteralDfa0_0()
          jjmatchedKind = 15;
          return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
       case 64:
-         return jjStopAtPos(0, 87);
+         return jjStopAtPos(0, 86);
       case 91:
-         return jjStopAtPos(0, 85);
+         return jjStopAtPos(0, 84);
       case 93:
-         return jjStopAtPos(0, 86);
+         return jjStopAtPos(0, 85);
       case 97:
          return jjMoveStringLiteralDfa1_0(0x10c010000000L, 0x0L);
       case 98:
-         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
+         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
       case 99:
-         return jjMoveStringLiteralDfa1_0(0x1204001200000000L, 0x1000L);
+         return jjMoveStringLiteralDfa1_0(0xa04001200000000L, 0x800L);
       case 100:
          return jjMoveStringLiteralDfa1_0(0x880040000000L, 0x0L);
-      case 101:
-         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
       case 102:
-         return jjMoveStringLiteralDfa1_0(0x240000000000L, 0x4840L);
+         return jjMoveStringLiteralDfa1_0(0x240000000000L, 0x2420L);
       case 105:
          return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
       case 107:
          return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
       case 108:
-         return jjMoveStringLiteralDfa1_0(0x21000000000000L, 0x100L);
+         return jjMoveStringLiteralDfa1_0(0x21000000000000L, 0x80L);
       case 109:
          return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
       case 110:
-         return jjMoveStringLiteralDfa1_0(0xc0010080000000L, 0x292L);
+         return jjMoveStringLiteralDfa1_0(0xc0010080000000L, 0x149L);
       case 111:
          return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
       case 112:
          return jjMoveStringLiteralDfa1_0(0x2422400000000L, 0x0L);
       case 114:
-         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
+         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
       case 115:
-         return jjMoveStringLiteralDfa1_0(0xe500000800000000L, 0x401L);
+         return jjMoveStringLiteralDfa1_0(0xf500000800000000L, 0x200L);
       case 116:
-         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x24L);
+         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x12L);
       case 124:
          return jjStopAtPos(0, 8);
       default :
@@ -489,8 +487,8 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
    switch(curChar)
    {
       case 46:
-         if ((active1 & 0x100000L) != 0L)
-            return jjStopAtPos(1, 84);
+         if ((active1 & 0x80000L) != 0L)
+            return jjStopAtPos(1, 83);
          break;
       case 47:
          if ((active0 & 0x80L) != 0L)
@@ -505,31 +503,31 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
             return jjStopAtPos(1, 16);
          break;
       case 97:
-         return jjMoveStringLiteralDfa2_0(active0, 0xc1012000000000L, active1, 0x140L);
+         return jjMoveStringLiteralDfa2_0(active0, 0xc1012000000000L, active1, 0xa0L);
       case 100:
          if ((active0 & 0x8000000000000L) != 0L)
             return jjStartNfaWithStates_0(1, 51, 12);
          break;
       case 101:
-         return jjMoveStringLiteralDfa2_0(active0, 0x10880900000000L, active1, 0x1000L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x10880900000000L, active1, 0x800L);
       case 104:
          return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
       case 105:
          return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
       case 108:
-         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
+         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
       case 110:
-         return jjMoveStringLiteralDfa2_0(active0, 0x800104010000000L, active1, 0L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x104010000000L, active1, 0L);
       case 111:
-         return jjMoveStringLiteralDfa2_0(active0, 0x12262402a0000000L, active1, 0x601aL);
+         return jjMoveStringLiteralDfa2_0(active0, 0xa262402a0000000L, active1, 0x300dL);
       case 114:
          if ((active0 & 0x8000000L) != 0L)
             return jjStartNfaWithStates_0(1, 27, 12);
-         return jjMoveStringLiteralDfa2_0(active0, 0x420400000000L, active1, 0x24L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x420400000000L, active1, 0x12L);
       case 116:
-         return jjMoveStringLiteralDfa2_0(active0, 0x500008000000000L, active1, 0x1L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x8500008000000000L, active1, 0L);
       case 117:
-         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000000L, active1, 0x680L);
+         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000000000L, active1, 0x340L);
       default :
          break;
    }
@@ -538,7 +536,7 @@ private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
 private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(0, old0, old1); 
+      return jjStartNfa_0(0, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(1, active0, active1);
@@ -547,9 +545,9 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
    switch(curChar)
    {
       case 97:
-         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x4L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2L);
       case 98:
-         return jjMoveStringLiteralDfa3_0(active0, 0xe000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x7000000000000000L, active1, 0L);
       case 99:
          return jjMoveStringLiteralDfa3_0(active0, 0x20104000000000L, active1, 0L);
       case 100:
@@ -557,31 +555,31 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
             return jjStartNfaWithStates_0(2, 28, 12);
          else if ((active0 & 0x20000000L) != 0L)
             return jjStartNfaWithStates_0(2, 29, 12);
-         return jjMoveStringLiteralDfa3_0(active0, 0x800000080000000L, active1, 0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
       case 101:
          return jjMoveStringLiteralDfa3_0(active0, 0x420000000000L, active1, 0L);
       case 105:
-         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x1000L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x800L);
       case 108:
-         return jjMoveStringLiteralDfa3_0(active0, 0x240800000000L, active1, 0xc0L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x240800000000L, active1, 0x60L);
       case 109:
-         if ((active1 & 0x400L) != 0L)
-            return jjStartNfaWithStates_0(2, 74, 12);
-         return jjMoveStringLiteralDfa3_0(active0, 0xc0010200000000L, active1, 0x200L);
+         if ((active1 & 0x200L) != 0L)
+            return jjStartNfaWithStates_0(2, 73, 12);
+         return jjMoveStringLiteralDfa3_0(active0, 0xc0010200000000L, active1, 0x100L);
       case 110:
-         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000000000L, active1, 0x100L);
+         return jjMoveStringLiteralDfa3_0(active0, 0xa00000000000000L, active1, 0x80L);
       case 111:
-         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x808L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x404L);
       case 114:
-         return jjMoveStringLiteralDfa3_0(active0, 0x100002000000000L, active1, 0x4003L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x8100002000000000L, active1, 0x2001L);
       case 115:
          return jjMoveStringLiteralDfa3_0(active0, 0x3880000000000L, active1, 0L);
       case 116:
-         if ((active1 & 0x10L) != 0L)
-            return jjStartNfaWithStates_0(2, 68, 12);
+         if ((active1 & 0x8L) != 0L)
+            return jjStartNfaWithStates_0(2, 67, 12);
          return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
       case 117:
-         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x2020L);
+         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x1010L);
       case 118:
          if ((active0 & 0x40000000L) != 0L)
             return jjStartNfaWithStates_0(2, 30, 12);
@@ -600,7 +598,7 @@ private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(1, old0, old1); 
+      return jjStartNfa_0(1, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(2, active0, active1);
@@ -611,7 +609,7 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
       case 97:
          return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
       case 98:
-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
       case 99:
          return jjMoveStringLiteralDfa4_0(active0, 0x200ca0400000000L, active1, 0L);
       case 101:
@@ -622,37 +620,37 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
             jjmatchedKind = 55;
             jjmatchedPos = 3;
          }
-         else if ((active1 & 0x20L) != 0L)
-            return jjStartNfaWithStates_0(3, 69, 12);
+         else if ((active1 & 0x10L) != 0L)
+            return jjStartNfaWithStates_0(3, 68, 12);
          return jjMoveStringLiteralDfa4_0(active0, 0x40116000000000L, active1, 0L);
       case 102:
          return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
       case 103:
-         if ((active1 & 0x100L) != 0L)
-            return jjStartNfaWithStates_0(3, 72, 12);
+         if ((active1 & 0x80L) != 0L)
+            return jjStartNfaWithStates_0(3, 71, 12);
          break;
       case 105:
-         return jjMoveStringLiteralDfa4_0(active0, 0x102000000000000L, active1, 0x1L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x8102000000000000L, active1, 0L);
       case 108:
-         if ((active1 & 0x80L) != 0L)
-            return jjStartNfaWithStates_0(3, 71, 12);
-         return jjMoveStringLiteralDfa4_0(active0, 0x241000000000L, active1, 0x1008L);
+         if ((active1 & 0x40L) != 0L)
+            return jjStartNfaWithStates_0(3, 70, 12);
+         return jjMoveStringLiteralDfa4_0(active0, 0x241000000000L, active1, 0x804L);
       case 109:
-         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x4002L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x2001L);
       case 110:
-         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x2004L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x1002L);
       case 111:
-         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
+         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
       case 114:
          return jjMoveStringLiteralDfa4_0(active0, 0x400008000000000L, active1, 0L);
       case 115:
-         return jjMoveStringLiteralDfa4_0(active0, 0xe800000000000000L, active1, 0x40L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000000000L, active1, 0x20L);
       case 116:
          if ((active0 & 0x100000000L) != 0L)
             return jjStartNfaWithStates_0(3, 32, 12);
          else if ((active0 & 0x1000000000000L) != 0L)
             return jjStartNfaWithStates_0(3, 48, 12);
-         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
       default :
          break;
    }
@@ -661,7 +659,7 @@ private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(2, old0, old1); 
+      return jjStartNfa_0(2, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(3, active0, active1);
@@ -669,38 +667,36 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
    }
    switch(curChar)
    {
-      case 45:
-         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
       case 58:
          return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
       case 97:
-         return jjMoveStringLiteralDfa5_0(active0, 0x1200000000000000L, active1, 0x4002L);
+         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000000000L, active1, 0x2001L);
       case 100:
-         if ((active1 & 0x2000L) != 0L)
-            return jjStartNfaWithStates_0(4, 77, 12);
+         if ((active1 & 0x1000L) != 0L)
+            return jjStartNfaWithStates_0(4, 76, 12);
          return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
       case 101:
-         if ((active1 & 0x40L) != 0L)
-            return jjStartNfaWithStates_0(4, 70, 12);
-         return jjMoveStringLiteralDfa5_0(active0, 0xca0600000000L, active1, 0x208L);
+         if ((active1 & 0x20L) != 0L)
+            return jjStartNfaWithStates_0(4, 69, 12);
+         return jjMoveStringLiteralDfa5_0(active0, 0xca0600000000L, active1, 0x104L);
       case 105:
-         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x1000L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x800L);
       case 108:
          return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
       case 110:
-         return jjMoveStringLiteralDfa5_0(active0, 0x100002000000000L, active1, 0x1L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x8100002000000000L, active1, 0L);
       case 111:
          return jjMoveStringLiteralDfa5_0(active0, 0x240000000000L, active1, 0L);
       case 114:
-         if ((active1 & 0x800L) != 0L)
-            return jjStartNfaWithStates_0(4, 75, 12);
+         if ((active1 & 0x400L) != 0L)
+            return jjStartNfaWithStates_0(4, 74, 12);
          break;
       case 115:
-         return jjMoveStringLiteralDfa5_0(active0, 0x40114000000000L, active1, 0x4L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x40114000000000L, active1, 0x2L);
       case 116:
          if ((active0 & 0x4000000000000L) != 0L)
             return jjStartNfaWithStates_0(4, 50, 12);
-         return jjMoveStringLiteralDfa5_0(active0, 0xe402000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa5_0(active0, 0x7402000000000000L, active1, 0L);
       default :
          break;
    }
@@ -709,7 +705,7 @@ private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(3, old0, old1); 
+      return jjStartNfa_0(3, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(4, active0, active1);
@@ -724,7 +720,7 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
             return jjStopAtPos(5, 35);
          return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
       case 97:
-         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
+         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
       case 98:
          return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
       case 100:
@@ -735,27 +731,27 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
             jjmatchedKind = 56;
             jjmatchedPos = 5;
          }
-         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
       case 105:
-         return jjMoveStringLiteralDfa6_0(active0, 0x1002000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x802000000000000L, active1, 0L);
       case 108:
-         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6L);
+         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3L);
       case 110:
-         return jjMoveStringLiteralDfa6_0(active0, 0x880200000000L, active1, 0x1000L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x880200000000L, active1, 0x800L);
       case 112:
          return jjMoveStringLiteralDfa6_0(active0, 0x40010000000000L, active1, 0L);
       case 114:
-         if ((active1 & 0x200L) != 0L)
-            return jjStartNfaWithStates_0(5, 73, 12);
-         return jjMoveStringLiteralDfa6_0(active0, 0xe000000000000000L, active1, 0L);
+         if ((active1 & 0x100L) != 0L)
+            return jjStartNfaWithStates_0(5, 72, 12);
+         return jjMoveStringLiteralDfa6_0(active0, 0x7000000000000000L, active1, 0L);
       case 115:
          return jjMoveStringLiteralDfa6_0(active0, 0x400000400000000L, active1, 0L);
       case 116:
          if ((active0 & 0x200000000000000L) != 0L)
             return jjStartNfaWithStates_0(5, 57, 12);
-         return jjMoveStringLiteralDfa6_0(active0, 0x106000000000L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x106000000000L, active1, 0x2000L);
       case 119:
-         return jjMoveStringLiteralDfa6_0(active0, 0x800240000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa6_0(active0, 0x240000000000L, active1, 0L);
       default :
          break;
    }
@@ -764,7 +760,7 @@ private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(4, old0, old1); 
+      return jjStartNfa_0(4, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(5, active0, active1);
@@ -773,25 +769,25 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
    switch(curChar)
    {
       case 45:
-         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x4001L);
+         return jjMoveStringLiteralDfa7_0(active0, 0x8400000000000000L, active1, 0x2000L);
       case 58:
          if ((active0 & 0x1000000000L) != 0L)
             return jjStopAtPos(6, 36);
          return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
       case 97:
-         return jjMoveStringLiteralDfa7_0(active0, 0x40010000000000L, active1, 0x4L);
+         return jjMoveStringLiteralDfa7_0(active0, 0x40010000000000L, active1, 0x2L);
       case 100:
          return jjMoveStringLiteralDfa7_0(active0, 0x880000000000L, active1, 0L);
       case 103:
-         if ((active1 & 0x1000L) != 0L)
-            return jjStartNfaWithStates_0(6, 76, 12);
+         if ((active1 & 0x800L) != 0L)
+            return jjStartNfaWithStates_0(6, 75, 12);
          break;
       case 105:
-         return jjMoveStringLiteralDfa7_0(active0, 0xe800660000000000L, active1, 0x2L);
+         return jjMoveStringLiteralDfa7_0(active0, 0x7000660000000000L, active1, 0x1L);
       case 110:
-         if ((active1 & 0x8L) != 0L)
-            return jjStartNfaWithStates_0(6, 67, 12);
-         return jjMoveStringLiteralDfa7_0(active0, 0x1020000000000000L, active1, 0L);
+         if ((active1 & 0x4L) != 0L)
+            return jjStartNfaWithStates_0(6, 66, 12);
+         return jjMoveStringLiteralDfa7_0(active0, 0x820000000000000L, active1, 0L);
       case 111:
          return jjMoveStringLiteralDfa7_0(active0, 0x2104000000000L, active1, 0L);
       case 115:
@@ -810,7 +806,7 @@ private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(5, old0, old1); 
+      return jjStartNfa_0(5, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(6, active0, active1);
@@ -829,23 +825,23 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
       case 105:
          return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
       case 108:
-         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
+         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
       case 110:
          if ((active0 & 0x2000000000000L) != 0L)
             return jjStartNfaWithStates_0(7, 49, 12);
-         return jjMoveStringLiteralDfa8_0(active0, 0xe000660000000000L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa8_0(active0, 0x7000660000000000L, active1, 0x2000L);
       case 114:
          return jjMoveStringLiteralDfa8_0(active0, 0x104000000000L, active1, 0L);
       case 115:
-         if ((active0 & 0x1000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(7, 60, 12);
+         if ((active0 & 0x800000000000000L) != 0L)
+            return jjStartNfaWithStates_0(7, 59, 12);
          break;
       case 116:
-         return jjMoveStringLiteralDfa8_0(active0, 0x800008000000000L, active1, 0x4L);
+         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x2L);
       case 119:
          return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
       case 122:
-         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
+         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
       default :
          break;
    }
@@ -854,7 +850,7 @@ private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(6, old0, old1); 
+      return jjStartNfa_0(6, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(7, active0, active1);
@@ -867,20 +863,16 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
       case 58:
          return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
       case 101:
-         if ((active1 & 0x4L) != 0L)
-            return jjStartNfaWithStates_0(8, 66, 12);
-         return jjMoveStringLiteralDfa9_0(active0, 0x40018000000000L, active1, 0x3L);
+         if ((active1 & 0x2L) != 0L)
+            return jjStartNfaWithStates_0(8, 65, 12);
+         return jjMoveStringLiteralDfa9_0(active0, 0x8040018000000000L, active1, 0x1L);
       case 103:
-         if ((active0 & 0x8000000000000000L) != 0L)
+         if ((active0 & 0x4000000000000000L) != 0L)
          {
-            jjmatchedKind = 63;
+            jjmatchedKind = 62;
             jjmatchedPos = 8;
          }
-         return jjMoveStringLiteralDfa9_0(active0, 0x6000660000000000L, active1, 0L);
-      case 104:
-         if ((active0 & 0x800000000000000L) != 0L)
-            return jjStartNfaWithStates_0(8, 59, 12);
-         break;
+         return jjMoveStringLiteralDfa9_0(active0, 0x3000660000000000L, active1, 0L);
       case 105:
          return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
       case 109:
@@ -888,7 +880,7 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
       case 110:
          return jjMoveStringLiteralDfa9_0(active0, 0x880400000000L, active1, 0L);
       case 117:
-         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
       default :
          break;
    }
@@ -897,7 +889,7 @@ private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(7, old0, old1); 
+      return jjStartNfa_0(7, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(8, active0, active1);
@@ -906,7 +898,7 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
    switch(curChar)
    {
       case 45:
-         return jjMoveStringLiteralDfa10_0(active0, 0x6040600000000000L, active1, 0x2L);
+         return jjMoveStringLiteralDfa10_0(active0, 0x3040600000000000L, active1, 0x1L);
       case 58:
          if ((active0 & 0x4000000000L) != 0L)
             return jjStopAtPos(9, 38);
@@ -918,9 +910,9 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
       case 103:
          return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0L);
       case 109:
-         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L);
       case 110:
-         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1L);
+         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);
       case 111:
          return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L);
       case 116:
@@ -933,7 +925,7 @@ private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(8, old0, old1); 
+      return jjStartNfa_0(8, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(9, active0, active1);
@@ -954,11 +946,11 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
             return jjStopAtPos(10, 42);
          return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);
       case 97:
-         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0L);
       case 98:
-         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0x2000L);
       case 103:
-         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L);
+         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
       case 104:
          if ((active0 & 0x400000000000000L) != 0L)
             return jjStartNfaWithStates_0(10, 58, 12);
@@ -966,7 +958,7 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
       case 114:
          return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
       case 115:
-         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000L, active1, 0x2L);
+         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000L, active1, 0x1L);
       case 117:
          return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L);
       default :
@@ -977,7 +969,7 @@ private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(9, old0, old1); 
+      return jjStartNfa_0(9, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(10, active0, active1);
@@ -992,19 +984,19 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
             return jjStopAtPos(11, 43);
          break;
       case 101:
-         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0x4000L);
+         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x2000L);
       case 102:
-         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L);
       case 105:
          return jjMoveStringLiteralDfa12_0(active0, 0x600400000000L, active1, 0L);
       case 111:
          return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
       case 112:
-         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L);
+         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);
       case 114:
          return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L);
       case 116:
-         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1L);
+         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
       default :
          break;
    }
@@ -1013,7 +1005,7 @@ private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(10, old0, old1); 
+      return jjStartNfa_0(10, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(11, active0, active1);
@@ -1022,14 +1014,14 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
    switch(curChar)
    {
       case 97:
-         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L);
+         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L);
       case 98:
          return jjMoveStringLiteralDfa13_0(active0, 0x600000000000L, active1, 0L);
       case 102:
-         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L, active1, 0L);
       case 104:
-         if ((active1 & 0x1L) != 0L)
-            return jjStartNfaWithStates_0(12, 64, 12);
+         if ((active0 & 0x8000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(12, 63, 12);
          break;
       case 105:
          if ((active0 & 0x40000000000000L) != 0L)
@@ -1038,13 +1030,13 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
       case 110:
          return jjMoveStringLiteralDfa13_0(active0, 0x400000000L, active1, 0L);
       case 114:
-         if ((active1 & 0x4000L) != 0L)
-            return jjStartNfaWithStates_0(12, 78, 12);
+         if ((active1 & 0x2000L) != 0L)
+            return jjStartNfaWithStates_0(12, 77, 12);
          return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
       case 115:
          return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L, active1, 0L);
       case 116:
-         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
       default :
          break;
    }
@@ -1053,7 +1045,7 @@ private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(11, old0, old1); 
+      return jjStartNfa_0(11, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(12, active0, active1);
@@ -1064,13 +1056,13 @@ private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1,
       case 45:
          return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L);
       case 99:
-         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2L);
+         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1L);
       case 101:
-         return jjMoveStringLiteralDfa14_0(active0, 0x4000100000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa14_0(active0, 0x2000100000000000L, active1, 0L);
       case 108:
          return jjMoveStringLiteralDfa14_0(active0, 0x600000000000L, active1, 0L);
       case 111:
-         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0L);
+         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active1, 0L);
       case 115:
          return jjMoveStringLiteralDfa14_0(active0, 0x400000000L, active1, 0L);
       default :
@@ -1081,7 +1073,7 @@ private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(12, old0, old1); 
+      return jjStartNfa_0(12, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(13, active0, active1);
@@ -1090,17 +1082,17 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
    switch(curChar)
    {
       case 101:
-         if ((active1 & 0x2L) != 0L)
-            return jjStartNfaWithStates_0(14, 65, 12);
+         if ((active1 & 0x1L) != 0L)
+            return jjStartNfaWithStates_0(14, 64, 12);
          break;
       case 105:
          return jjMoveStringLiteralDfa15_0(active0, 0x600000000000L, active1, 0L);
       case 108:
          return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L, active1, 0L);
       case 114:
-         if ((active0 & 0x4000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(14, 62, 12);
-         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000000L, active1, 0L);
+         if ((active0 & 0x2000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(14, 61, 12);
+         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L, active1, 0L);
       case 115:
          return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L, active1, 0L);
       case 116:
@@ -1113,7 +1105,7 @@ private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1,
 private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
 {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
-      return jjStartNfa_0(13, old0, old1); 
+      return jjStartNfa_0(13, old0, old1);
    try { curChar = input_stream.readChar(); }
    catch(java.io.IOException e) {
       jjStopStringLiteralDfa_0(14, active0, 0L);
@@ -1122,8 +1114,8 @@ private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1,
    switch(curChar)
    {
       case 101:
-         if ((active0 & 0x2000000000000000L) != 0L)
-            return jjStartNfaWithStates_0(15, 61, 12);
+         if ((active0 & 0x1000000000000000L) != 0L)
+            return jjStartNfaWithStates_0(15, 60, 12);
          return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
       case 102:
          return jjMoveStringLiteralDfa16_0(active0, 0x100000000000L);
@@ -1509,8 +1501,8 @@ private final int jjMoveNfa_0(int startState, int curPos)
                case 12:
                   if ((0x3ff600000000000L & l) == 0L)
                      break;
-                  if (kind > 79)
-                     kind = 79;
+                  if (kind > 78)
+                     kind = 78;
                   jjstateSet[jjnewStateCnt++] = 12;
                   break;
                default : break;
@@ -1528,8 +1520,8 @@ private final int jjMoveNfa_0(int startState, int curPos)
                case 12:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 79)
-                     kind = 79;
+                  if (kind > 78)
+                     kind = 78;
                   jjCheckNAdd(12);
                   break;
                case 1:
@@ -1556,8 +1548,8 @@ private final int jjMoveNfa_0(int startState, int curPos)
                case 0:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 79)
-                     kind = 79;
+                  if (kind > 78)
+                     kind = 78;
                   jjCheckNAdd(12);
                   break;
                case 1:
@@ -1571,8 +1563,8 @@ private final int jjMoveNfa_0(int startState, int curPos)
                case 12:
                   if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 79)
-                     kind = 79;
+                  if (kind > 78)
+                     kind = 78;
                   jjCheckNAdd(12);
                   break;
                default : break;
@@ -1593,7 +1585,7 @@ private final int jjMoveNfa_0(int startState, int curPos)
    }
 }
 static final int[] jjnextStates = {
-   1, 2, 4, 5, 
+   1, 2, 4, 5,
 };
 private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
 {
@@ -1601,7 +1593,7 @@ private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, lo
    {
       case 0:
          return ((jjbitVec2[i2] & l2) != 0L);
-      default : 
+      default :
          if ((jjbitVec0[i1] & l1) != 0L)
             return true;
          return false;
@@ -1657,7 +1649,7 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
          return ((jjbitVec25[i2] & l2) != 0L);
       case 215:
          return ((jjbitVec26[i2] & l2) != 0L);
-      default : 
+      default :
          if ((jjbitVec3[i1] & l1) != 0L)
             return true;
          return false;
@@ -1715,42 +1707,42 @@ private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, lo
          return ((jjbitVec25[i2] & l2) != 0L);
       case 215:
          return ((jjbitVec26[i2] & l2) != 0L);
-      default : 
+      default :
          if ((jjbitVec3[i1] & l1) != 0L)
             return true;
          return false;
    }
 }
 public static final String[] jjstrLiteralImages = {
-"", null, null, null, null, null, "\57", "\57\57", "\174", "\53", "\55", 
-"\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, null, 
-null, null, null, null, null, "\157\162", "\141\156\144", "\155\157\144", 
-"\144\151\166", "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164", 
-"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\145\154\146\72\72", "\143\150\151\154\144\72\72", 
-"\160\141\162\145\156\164\72\72", "\141\156\143\145\163\164\157\162\72\72", 
-"\141\164\164\162\151\142\165\164\145\72\72", "\156\141\155\145\163\160\141\143\145\72\72", 
-"\160\162\145\143\145\144\151\156\147\72\72", "\146\157\154\154\157\167\151\156\147\72\72", 
-"\144\145\163\143\145\156\144\141\156\164\72\72", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146\72\72", 
-"\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147\72\72", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147\72\72", 
-"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146\72\72", "\154\141\163\164", "\160\157\163\151\164\151\157\156", 
-"\143\157\165\156\164", "\151\144", "\153\145\171", "\154\157\143\141\154\55\156\141\155\145", 
-"\156\141\155\145\163\160\141\143\145\55\165\162\151", "\156\141\155\145", "\163\164\162\151\156\147", "\143\157\156\143\141\164", 
-"\163\164\141\162\164\163\55\167\151\164\150", "\145\156\144\163\55\167\151\164\150", "\143\157\156\164\141\151\156\163", 
-"\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145", "\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162", 
-"\163\165\142\163\164\162\151\156\147", "\163\164\162\151\156\147\55\154\145\156\147\164\150", 
-"\156\157\162\155\141\154\151\172\145\55\163\160\141\143\145", "\164\162\141\156\163\154\141\164\145", "\142\157\157\154\145\141\156", 
-"\156\157\164", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", 
-"\154\141\156\147", "\156\165\155\142\145\162", "\163\165\155", "\146\154\157\157\162", 
-"\143\145\151\154\151\156\147", "\162\157\165\156\144", "\146\157\162\155\141\164\55\156\165\155\142\145\162", 
+"", null, null, null, null, null, "\57", "\57\57", "\174", "\53", "\55",
+"\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, null,
+null, null, null, null, null, "\157\162", "\141\156\144", "\155\157\144",
+"\144\151\166", "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164",
+"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\145\154\146\72\72", "\143\150\151\154\144\72\72",
+"\160\141\162\145\156\164\72\72", "\141\156\143\145\163\164\157\162\72\72",
+"\141\164\164\162\151\142\165\164\145\72\72", "\156\141\155\145\163\160\141\143\145\72\72",
+"\160\162\145\143\145\144\151\156\147\72\72", "\146\157\154\154\157\167\151\156\147\72\72",
+"\144\145\163\143\145\156\144\141\156\164\72\72", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146\72\72",
+"\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147\72\72", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147\72\72",
+"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146\72\72", "\154\141\163\164", "\160\157\163\151\164\151\157\156",
+"\143\157\165\156\164", "\151\144", "\153\145\171", "\154\157\143\141\154\55\156\141\155\145",
+"\156\141\155\145\163\160\141\143\145\55\165\162\151", "\156\141\155\145", "\163\164\162\151\156\147", "\143\157\156\143\141\164",
+"\163\164\141\162\164\163\55\167\151\164\150", "\143\157\156\164\141\151\156\163",
+"\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145", "\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162",
+"\163\165\142\163\164\162\151\156\147", "\163\164\162\151\156\147\55\154\145\156\147\164\150",
+"\156\157\162\155\141\154\151\172\145\55\163\160\141\143\145", "\164\162\141\156\163\154\141\164\145", "\142\157\157\154\145\141\156",
+"\156\157\164", "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154",
+"\154\141\156\147", "\156\165\155\142\145\162", "\163\165\155", "\146\154\157\157\162",
+"\143\145\151\154\151\156\147", "\162\157\165\156\144", "\146\157\162\155\141\164\55\156\165\155\142\145\162",
 null, "\72", "\50", "\51", "\56", "\56\56", "\133", "\135", "\100", "\54", "\52", };
 public static final String[] lexStateNames = {
-   "DEFAULT", 
+   "DEFAULT",
 };
 static final long[] jjtoToken = {
-   0xfffffffff817ffc1L, 0x3ffffffL, 
+   0xfffffffff817ffc1L, 0x1ffffffL,
 };
 static final long[] jjtoSkip = {
-   0x3eL, 0x0L, 
+   0x3eL, 0x0L,
 };
 protected SimpleCharStream input_stream;
 private final int[] jjrounds = new int[13];
@@ -1814,7 +1806,7 @@ int jjround;
 int jjmatchedPos;
 int jjmatchedKind;
 
-public Token getNextToken() 
+public Token getNextToken()
 {
   int kind;
   Token specialToken = null;
@@ -1823,13 +1815,13 @@ public Token getNextToken()
 
   EOFLoop :
   for (;;)
-  {   
-   try   
-   {     
+  {
+   try
+   {
       curChar = input_stream.BeginToken();
-   }     
+   }
    catch(java.io.IOException e)
-   {        
+   {
       jjmatchedKind = 0;
       matchedToken = jjFillToken();
       return matchedToken;
