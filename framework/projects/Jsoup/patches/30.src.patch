diff --git a/src/main/java/org/jsoup/helper/DataUtil.java b/src/main/java/org/jsoup/helper/DataUtil.java
index 33457c3..dab3bc2 100644
--- a/src/main/java/org/jsoup/helper/DataUtil.java
+++ b/src/main/java/org/jsoup/helper/DataUtil.java
@@ -7,7 +7,6 @@ import org.jsoup.parser.Parser;
 import java.io.*;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
-import java.nio.charset.IllegalCharsetNameException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.Locale;
@@ -17,7 +16,7 @@ import java.util.Locale;
  *
  */
 public class DataUtil {
-    private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)");
+    private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)");
     static final String defaultCharset = "UTF-8"; // used if not found in header or meta charset
     private static final int bufferSize = 0x20000; // ~130K.
 
@@ -81,25 +80,8 @@ public class DataUtil {
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
-                        try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
-
+                String foundCharset = meta.hasAttr("http-equiv") ? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
@@ -169,16 +151,9 @@ public class DataUtil {
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
             String charset = m.group(1).trim();
-            charset = charset.replace("charset=", "");
-            if (charset.isEmpty()) return null;
-            try {
-                if (Charset.isSupported(charset)) return charset;
-                charset = charset.toUpperCase(Locale.ENGLISH);
-                if (Charset.isSupported(charset)) return charset;
-            } catch (IllegalCharsetNameException e) {
-                // if our advanced charset matching fails.... we just take the default
-                return null;
-            }
+            if (Charset.isSupported(charset)) return charset;
+            charset = charset.toUpperCase(Locale.ENGLISH);
+            if (Charset.isSupported(charset)) return charset;
         }
         return null;
     }
diff --git a/src/main/java/org/jsoup/helper/HttpConnection.java b/src/main/java/org/jsoup/helper/HttpConnection.java
index 4940470..f748c22 100644
--- a/src/main/java/org/jsoup/helper/HttpConnection.java
+++ b/src/main/java/org/jsoup/helper/HttpConnection.java
@@ -453,12 +453,7 @@ public class HttpConnection implements Connection {
                 if (needsRedirect && req.followRedirects()) {
                     req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.
                     req.data().clear();
-
-                    String location = res.header("Location");
-                    if (location != null && location.startsWith("http:/") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php
-                        location = location.substring(6);
-                    req.url(new URL(req.url(), encodeUrl(location)));
-
+                    req.url(new URL(req.url(), encodeUrl(res.header("Location"))));
                     for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)
                         req.cookie(cookie.getKey(), cookie.getValue());
                     }
