diff --git a/guava-tests/test/com/google/common/math/DoubleMathTest.java b/guava-tests/test/com/google/common/math/DoubleMathTest.java
index 8076197..ab1c951 100644
--- a/guava-tests/test/com/google/common/math/DoubleMathTest.java
+++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java
@@ -106,10 +106,7 @@ public class DoubleMathTest extends TestCase {
             & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;
 
         try {
-          assertEquals(
-              "Rounding " + d + " with mode " + mode,
-              expected.intValue(),
-              DoubleMath.roundToInt(d, mode));
+          assertEquals(expected.intValue(), DoubleMath.roundToInt(d, mode));
           assertTrue(isInBounds);
         } catch (ArithmeticException e) {
           assertFalse(isInBounds);
diff --git a/guava-tests/test/com/google/common/math/MathTesting.java b/guava-tests/test/com/google/common/math/MathTesting.java
index 01af5a9..a4bc6a9 100644
--- a/guava-tests/test/com/google/common/math/MathTesting.java
+++ b/guava-tests/test/com/google/common/math/MathTesting.java
@@ -220,16 +220,6 @@ public class MathTesting {
         fractionalBuilder.add(d * scale).add(-d * scale);
       }
     }
-    for (int i = Double.MIN_EXPONENT; i <= Double.MAX_EXPONENT; i++) {
-      for (int direction : new int[] {1, -1}) {
-        double d = 
-            Double.longBitsToDouble(Double.doubleToLongBits(Math.scalb(1.0, i)) + direction);
-        // Math.nextUp/nextDown
-        if (d != Math.rint(d)) {
-          fractionalBuilder.add(d);
-        }
-      }
-    }
     for (double d : Doubles.asList(0, 1, 2, 7, 51, 102, Math.scalb(1.0, 53), Integer.MIN_VALUE,
         Integer.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE)) {
       for (double delta : Doubles.asList(0.0, 1.0, 2.0)) {
