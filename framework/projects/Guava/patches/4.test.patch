diff --git a/guava-tests/test/com/google/common/collect/RangeTest.java b/guava-tests/test/com/google/common/collect/RangeTest.java
index a862a09..2e32593 100644
--- a/guava-tests/test/com/google/common/collect/RangeTest.java
+++ b/guava-tests/test/com/google/common/collect/RangeTest.java
@@ -51,7 +51,7 @@ public class RangeTest extends TestCase {
     assertEquals(8, (int) range.upperEndpoint());
     assertEquals(OPEN, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("(4..8)", range.toString());
+    assertEquals("(4\u20258)", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -78,7 +78,7 @@ public class RangeTest extends TestCase {
     assertEquals(7, (int) range.upperEndpoint());
     assertEquals(CLOSED, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("[5..7]", range.toString());
+    assertEquals("[5\u20257]", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -100,7 +100,7 @@ public class RangeTest extends TestCase {
     assertEquals(7, (int) range.upperEndpoint());
     assertEquals(CLOSED, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("(4..7]", range.toString());
+    assertEquals("(4\u20257]", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -114,7 +114,7 @@ public class RangeTest extends TestCase {
     assertEquals(8, (int) range.upperEndpoint());
     assertEquals(OPEN, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("[5..8)", range.toString());
+    assertEquals("[5\u20258)", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -147,7 +147,7 @@ public class RangeTest extends TestCase {
     assertEquals(4, (int) range.upperEndpoint());
     assertEquals(CLOSED, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("[4..4]", range.toString());
+    assertEquals("[4\u20254]", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -163,7 +163,7 @@ public class RangeTest extends TestCase {
     assertEquals(4, (int) range.upperEndpoint());
     assertEquals(OPEN, range.upperBoundType());
     assertTrue(range.isEmpty());
-    assertEquals("[4..4)", range.toString());
+    assertEquals("[4\u20254)", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -179,7 +179,7 @@ public class RangeTest extends TestCase {
     assertEquals(4, (int) range.upperEndpoint());
     assertEquals(CLOSED, range.upperBoundType());
     assertTrue(range.isEmpty());
-    assertEquals("(4..4]", range.toString());
+    assertEquals("(4\u20254]", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -193,7 +193,7 @@ public class RangeTest extends TestCase {
     assertEquals(5, (int) range.upperEndpoint());
     assertEquals(OPEN, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("(-\u221e..5)", range.toString());
+    assertEquals("(-\u221e\u20255)", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -207,7 +207,7 @@ public class RangeTest extends TestCase {
     assertEquals(OPEN, range.lowerBoundType());
     assertUnboundedAbove(range);
     assertFalse(range.isEmpty());
-    assertEquals("(5..+\u221e)", range.toString());
+    assertEquals("(5\u2025+\u221e)", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -221,7 +221,7 @@ public class RangeTest extends TestCase {
     assertEquals(CLOSED, range.lowerBoundType());
     assertUnboundedAbove(range);
     assertFalse(range.isEmpty());
-    assertEquals("[6..+\u221e)", range.toString());
+    assertEquals("[6\u2025+\u221e)", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -235,7 +235,7 @@ public class RangeTest extends TestCase {
     assertEquals(4, (int) range.upperEndpoint());
     assertEquals(CLOSED, range.upperBoundType());
     assertFalse(range.isEmpty());
-    assertEquals("(-\u221e..4]", range.toString());
+    assertEquals("(-\u221e\u20254]", range.toString());
     reserializeAndAssert(range);
   }
 
@@ -246,7 +246,7 @@ public class RangeTest extends TestCase {
     assertUnboundedBelow(range);
     assertUnboundedAbove(range);
     assertFalse(range.isEmpty());
-    assertEquals("(-\u221e..+\u221e)", range.toString());
+    assertEquals("(-\u221e\u2025+\u221e)", range.toString());
     assertSame(range, reserializeAndAssert(range));
     assertSame(range, Range.all());
   }
