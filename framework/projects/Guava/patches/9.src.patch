diff --git a/guava/src/com/google/common/collect/Iterables.java b/guava/src/com/google/common/collect/Iterables.java
index ccc5ce0..a338387 100644
--- a/guava/src/com/google/common/collect/Iterables.java
+++ b/guava/src/com/google/common/collect/Iterables.java
@@ -181,10 +181,8 @@ public final class Iterables {
 
   private static <T> boolean removeIfFromRandomAccessList(
       List<T> list, Predicate<? super T> predicate) {
-    // Note: Not all random access lists support set(). Additionally, it's possible
-    // for a list to reject setting an element, such as when the list does not permit
-    // duplicate elements. For both of those cases,  we need to fall back to a slower
-    // implementation.
+    // Note: Not all random access lists support set() so we need to deal with
+    // those that don't and attempt the slower remove() based solution.
     int from = 0;
     int to = 0;
 
@@ -197,9 +195,6 @@ public final class Iterables {
           } catch (UnsupportedOperationException e) {
             slowRemoveIfForRemainingElements(list, predicate, to, from);
             return true;
-          } catch (IllegalArgumentException e) {
-            slowRemoveIfForRemainingElements(list, predicate, to, from);
-            return true;
           }
         }
         to++;
