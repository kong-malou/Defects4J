diff --git a/guava-tests/test/com/google/common/collect/IterablesTest.java b/guava-tests/test/com/google/common/collect/IterablesTest.java
index 2273fd6..9a853cc 100644
--- a/guava-tests/test/com/google/common/collect/IterablesTest.java
+++ b/guava-tests/test/com/google/common/collect/IterablesTest.java
@@ -16,7 +16,6 @@
 
 package com.google.common.collect;
 
-import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.skip;
 import static com.google.common.collect.Lists.newArrayList;
 import static com.google.common.collect.Sets.newLinkedHashSet;
@@ -1037,38 +1036,6 @@ public class IterablesTest extends TestCase {
     assertEquals(newArrayList("a", "c", "e"), list);
   }
 
-  public void testRemoveIf_randomAccess_notPermittingDuplicates() {
-    // https://github.com/google/guava/issues/1596
-    final List<String> delegate = newArrayList("a", "b", "c", "d", "e");
-    List<String> uniqueList = Constraints.constrainedList(delegate,
-        new Constraint<String>() {
-          @Override
-          public String checkElement(String element) {
-            checkArgument(
-                !delegate.contains(element), "this list does not permit duplicate elements");
-            return element;
-          }
-        });
-
-    assertTrue(uniqueList instanceof RandomAccess);
-    assertTrue(Iterables.removeIf(uniqueList,
-        new Predicate<String>() {
-          @Override
-          public boolean apply(String s) {
-            return s.equals("b") || s.equals("d") || s.equals("f");
-          }
-        }));
-    assertEquals(newArrayList("a", "c", "e"), uniqueList);
-    assertFalse(Iterables.removeIf(uniqueList,
-        new Predicate<String>() {
-          @Override
-          public boolean apply(String s) {
-            return s.equals("x") || s.equals("y") || s.equals("z");
-          }
-        }));
-    assertEquals(newArrayList("a", "c", "e"), uniqueList);
-  }
-
   public void testRemoveIf_transformedList() {
     List<String> list = newArrayList("1", "2", "3", "4", "5");
     List<Integer> transformed = Lists.transform(list,
