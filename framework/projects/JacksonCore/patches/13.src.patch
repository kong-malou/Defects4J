diff --git a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java
index 85b4d32..68f699b 100644
--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java
+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java
@@ -31,15 +31,6 @@ public abstract class GeneratorBase extends JsonGenerator
             | Feature.STRICT_DUPLICATE_DETECTION.getMask()
             ;
 
-    // // // Constants for validation messages (since 2.6)
-
-    protected final String WRITE_BINARY = "write a binary value";
-    protected final String WRITE_BOOLEAN = "write a boolean value";
-    protected final String WRITE_NULL = "write a null";
-    protected final String WRITE_NUMBER = "write a number";
-    protected final String WRITE_RAW = "write a raw (unencoded) value";
-    protected final String WRITE_STRING = "write a string";
-
     /*
     /**********************************************************
     /* Configuration
diff --git a/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java b/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
index 9ce93e4..dbe7c9d 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
@@ -163,7 +163,8 @@ public abstract class JsonGeneratorImpl extends GeneratorBase
     // // Overrides just to make things final, to possibly help with inlining
     
     @Override
-    public final void writeStringField(String fieldName, String value) throws IOException
+    public final void writeStringField(String fieldName, String value)
+        throws IOException, JsonGenerationException
     {
         writeFieldName(fieldName);
         writeString(value);
diff --git a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java
index a5706c8..4ff12d7 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java
@@ -166,9 +166,6 @@ public class JsonWriteContext extends JsonStreamContext
     public int writeValue() {
         // Most likely, object:
         if (_type == TYPE_OBJECT) {
-            if (!_gotName) {
-                return STATUS_EXPECT_NAME;
-            }
             _gotName = false;
             ++_index;
             return STATUS_OK_AFTER_COLON;
diff --git a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java
index 8063425..885d935 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java
@@ -416,7 +416,7 @@ public class UTF8JsonGenerator
     @Override
     public void writeString(String text) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (text == null) {
             _writeNull();
             return;
@@ -464,7 +464,7 @@ public class UTF8JsonGenerator
     @Override
     public void writeString(char[] text, int offset, int len) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
         }
@@ -488,7 +488,7 @@ public class UTF8JsonGenerator
     @Override
     public final void writeString(SerializableString text) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
         }
@@ -508,7 +508,7 @@ public class UTF8JsonGenerator
     @Override
     public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
         }
@@ -523,7 +523,7 @@ public class UTF8JsonGenerator
     @Override
     public void writeUTF8String(byte[] text, int offset, int len) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
         }
@@ -590,7 +590,7 @@ public class UTF8JsonGenerator
     // since 2.5
     @Override
     public void writeRawValue(SerializableString text) throws IOException {
-        _verifyValueWrite(WRITE_RAW);
+        _verifyValueWrite("write raw value");
         byte[] raw = text.asUnquotedUTF8();
         if (raw.length > 0) {
             _writeBytes(raw);
@@ -710,7 +710,7 @@ public class UTF8JsonGenerator
             byte[] data, int offset, int len)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_BINARY);
+        _verifyValueWrite("write binary value");
         // Starting quotes
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
@@ -729,7 +729,7 @@ public class UTF8JsonGenerator
             InputStream data, int dataLength)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_BINARY);
+        _verifyValueWrite("write binary value");
         // Starting quotes
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
@@ -768,7 +768,7 @@ public class UTF8JsonGenerator
     public void writeNumber(short s)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         // up to 5 digits and possible minus sign
         if ((_outputTail + 6) >= _outputEnd) {
             _flushBuffer();
@@ -793,7 +793,7 @@ public class UTF8JsonGenerator
     public void writeNumber(int i)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         // up to 10 digits and possible minus sign
         if ((_outputTail + 11) >= _outputEnd) {
             _flushBuffer();
@@ -819,7 +819,7 @@ public class UTF8JsonGenerator
     public void writeNumber(long l)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (_cfgNumbersAsStrings) {
             _writeQuotedLong(l);
             return;
@@ -845,7 +845,7 @@ public class UTF8JsonGenerator
     public void writeNumber(BigInteger value)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (value == null) {
             _writeNull();
         } else if (_cfgNumbersAsStrings) {
@@ -868,7 +868,7 @@ public class UTF8JsonGenerator
             return;
         }
         // What is the max length for doubles? 40 chars?
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         writeRaw(String.valueOf(d));
     }
 
@@ -884,7 +884,7 @@ public class UTF8JsonGenerator
             return;
         }
         // What is the max length for floats?
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         writeRaw(String.valueOf(f));
     }
 
@@ -893,7 +893,7 @@ public class UTF8JsonGenerator
         throws IOException, JsonGenerationException
     {
         // Don't really know max length for big decimal, no point checking
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (value == null) {
             _writeNull();
         } else if (_cfgNumbersAsStrings) {
@@ -909,7 +909,7 @@ public class UTF8JsonGenerator
     public void writeNumber(String encodedValue)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (_cfgNumbersAsStrings) {
             _writeQuotedRaw(encodedValue);            
         } else {
@@ -934,7 +934,7 @@ public class UTF8JsonGenerator
     public void writeBoolean(boolean state)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_BOOLEAN);
+        _verifyValueWrite("write boolean value");
         if ((_outputTail + 5) >= _outputEnd) {
             _flushBuffer();
         }
@@ -948,7 +948,7 @@ public class UTF8JsonGenerator
     public void writeNull()
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_NULL);
+        _verifyValueWrite("write null value");
         _writeNull();
     }
 
@@ -959,7 +959,8 @@ public class UTF8JsonGenerator
      */
 
     @Override
-    protected final void _verifyValueWrite(String typeMsg) throws IOException
+    protected final void _verifyValueWrite(String typeMsg)
+        throws IOException, JsonGenerationException
     {
         int status = _writeContext.writeValue();
         if (status == JsonWriteContext.STATUS_EXPECT_NAME) {
@@ -997,7 +998,8 @@ public class UTF8JsonGenerator
         _verifyPrettyValueWrite(typeMsg, status);
     }
 
-    protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException
+    protected final void _verifyPrettyValueWrite(String typeMsg, int status)
+        throws IOException, JsonGenerationException
     {
         // If we have a pretty printer, it knows what to do:
         switch (status) {
diff --git a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java
index 1e7bd6c..0da0e75 100644
--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java
@@ -319,7 +319,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeString(String text) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (text == null) {
             _writeNull();
             return;
@@ -339,7 +339,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeString(char[] text, int offset, int len) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
         }
@@ -355,7 +355,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeString(SerializableString sstr) throws IOException
     {
-        _verifyValueWrite(WRITE_STRING);
+        _verifyValueWrite("write text value");
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
         }
@@ -507,7 +507,7 @@ public final class WriterBasedJsonGenerator
     public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_BINARY);
+        _verifyValueWrite("write binary value");
         // Starting quotes
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
@@ -526,7 +526,7 @@ public final class WriterBasedJsonGenerator
             InputStream data, int dataLength)
         throws IOException, JsonGenerationException
     {
-        _verifyValueWrite(WRITE_BINARY);
+        _verifyValueWrite("write binary value");
         // Starting quotes
         if (_outputTail >= _outputEnd) {
             _flushBuffer();
@@ -564,7 +564,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeNumber(short s) throws IOException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (_cfgNumbersAsStrings) {
             _writeQuotedShort(s);
             return;
@@ -588,7 +588,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeNumber(int i) throws IOException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (_cfgNumbersAsStrings) {
             _writeQuotedInt(i);
             return;
@@ -612,7 +612,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeNumber(long l) throws IOException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (_cfgNumbersAsStrings) {
             _writeQuotedLong(l);
             return;
@@ -638,7 +638,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeNumber(BigInteger value) throws IOException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (value == null) {
             _writeNull();
         } else if (_cfgNumbersAsStrings) {
@@ -659,7 +659,7 @@ public final class WriterBasedJsonGenerator
             return;
         }
         // What is the max length for doubles? 40 chars?
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         writeRaw(String.valueOf(d));
     }
 
@@ -673,7 +673,7 @@ public final class WriterBasedJsonGenerator
             return;
         }
         // What is the max length for floats?
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         writeRaw(String.valueOf(f));
     }
 
@@ -681,7 +681,7 @@ public final class WriterBasedJsonGenerator
     public void writeNumber(BigDecimal value) throws IOException
     {
         // Don't really know max length for big decimal, no point checking
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (value == null) {
             _writeNull();
         } else if (_cfgNumbersAsStrings) {
@@ -696,7 +696,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeNumber(String encodedValue) throws IOException
     {
-        _verifyValueWrite(WRITE_NUMBER);
+        _verifyValueWrite("write number");
         if (_cfgNumbersAsStrings) {
             _writeQuotedRaw(encodedValue);            
         } else {
@@ -720,7 +720,7 @@ public final class WriterBasedJsonGenerator
     @Override
     public void writeBoolean(boolean state) throws IOException
     {
-        _verifyValueWrite(WRITE_BOOLEAN);
+        _verifyValueWrite("write boolean value");
         if ((_outputTail + 5) >= _outputEnd) {
             _flushBuffer();
         }
@@ -743,7 +743,7 @@ public final class WriterBasedJsonGenerator
 
     @Override
     public void writeNull() throws IOException {
-        _verifyValueWrite(WRITE_NULL);
+        _verifyValueWrite("write null value");
         _writeNull();
     }
 
