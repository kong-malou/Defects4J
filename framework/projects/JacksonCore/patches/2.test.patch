diff --git a/src/test/java/com/fasterxml/jackson/core/read/JsonParserTest.java b/src/test/java/com/fasterxml/jackson/core/read/JsonParserTest.java
index 12d2db5..55442e1 100644
--- a/src/test/java/com/fasterxml/jackson/core/read/JsonParserTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/JsonParserTest.java
@@ -13,7 +13,8 @@ import java.util.*;
  * functionality works as expected.
  */
 @SuppressWarnings("resource")
-public class JsonParserTest extends BaseTest
+public class JsonParserTest
+    extends com.fasterxml.jackson.core.BaseTest
 {
     public void testConfig() throws Exception
     {
diff --git a/src/test/java/com/fasterxml/jackson/core/read/UTF32ParseTest.java b/src/test/java/com/fasterxml/jackson/core/read/UTF32ParseTest.java
deleted file mode 100644
index 674595a..0000000
--- a/src/test/java/com/fasterxml/jackson/core/read/UTF32ParseTest.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.fasterxml.jackson.core.read;
-
-import java.io.CharConversionException;
-
-import com.fasterxml.jackson.core.*;
-
-// Tests from [jackson-core#382]
-public class UTF32ParseTest extends BaseTest
-{
-    private final JsonFactory FACTORY = new JsonFactory();
-    
-    public void testSimpleEOFs() throws Exception
-    {
-        // 2 spaces
-        byte[] data = { 0x00, 0x00, 0x00, 0x20,
-                0x00, 0x00, 0x00, 0x20
-        };
-
-        for (int len = 5; len <= 7; ++len) {
-            JsonParser parser = FACTORY.createParser(data, 0, len);
-            try {
-                parser.nextToken();
-                fail("Should not pass");
-            } catch (CharConversionException e) {
-                verifyException(e, "Unexpected EOF");
-                verifyException(e, "of a 4-byte UTF-32 char");
-            }
-            parser.close();
-        }
-    }
-
-    public void testSimpleInvalidUTF32() throws Exception
-    {
-        // 2 characters, space, then something beyond valid Unicode set
-        byte[] data = {
-                0x00,
-                0x00,
-                0x00,
-                0x20,
-                (byte) 0xFE,
-                (byte) 0xFF,
-                0x00,
-                0x01
-        };
-
-        JsonParser parser = FACTORY.createParser(data);
-
-        try {
-            parser.nextToken();
-            fail("Should not pass");
-        } catch (CharConversionException e) {
-            verifyException(e, "Invalid UTF-32 character 0xfefe0001");
-        }
-        parser.close();
-    }
-}
