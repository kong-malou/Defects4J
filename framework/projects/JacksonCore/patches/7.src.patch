diff --git a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java
index 5917f5d..0048bda 100644
--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java
@@ -1681,7 +1681,7 @@ public abstract class JsonGenerator
      */
     public void copyCurrentEvent(JsonParser p) throws IOException
     {
-        JsonToken t = p.currentToken();
+        JsonToken t = p.getCurrentToken();
         // sanity check; what to do?
         if (t == null) {
             _reportError("No current event to copy");
@@ -1784,7 +1784,7 @@ public abstract class JsonGenerator
      */
     public void copyCurrentStructure(JsonParser p) throws IOException
     {
-        JsonToken t = p.currentToken();
+        JsonToken t = p.getCurrentToken();
         if (t == null) {
             _reportError("No current event to copy");
         }
diff --git a/src/main/java/com/fasterxml/jackson/core/JsonParser.java b/src/main/java/com/fasterxml/jackson/core/JsonParser.java
index 90aed56..e2d1efe 100644
--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java
+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java
@@ -884,7 +884,7 @@ public abstract class JsonParser
     /**
      * Method that is functionally equivalent to:
      *<code>
-     *  return currentTokenId() == id
+     *  return getCurrentTokenId() == id
      *</code>
      * but may be more efficiently implemented.
      *<p>
@@ -899,7 +899,7 @@ public abstract class JsonParser
     /**
      * Method that is functionally equivalent to:
      *<code>
-     *  return currentToken() == t
+     *  return getCurrentTokenId() == id
      *</code>
      * but may be more efficiently implemented.
      *<p>
@@ -956,7 +956,7 @@ public abstract class JsonParser
      *<p>
      * Default implementation is equivalent to:
      *<pre>
-     *   currentToken() == JsonToken.START_ARRAY
+     *   getCurrentToken() == JsonToken.START_ARRAY
      *</pre>
      * but may be overridden by custom parser implementations.
      *
@@ -964,7 +964,7 @@ public abstract class JsonParser
      *   start-array marker (such {@link JsonToken#START_ARRAY});
      *   false if not.
      */
-    public boolean isExpectedStartArrayToken() { return currentToken() == JsonToken.START_ARRAY; }
+    public boolean isExpectedStartArrayToken() { return getCurrentToken() == JsonToken.START_ARRAY; }
 
     /**
      * Similar to {@link #isExpectedStartArrayToken()}, but checks whether stream
@@ -972,7 +972,7 @@ public abstract class JsonParser
      *
      * @since 2.5
      */
-    public boolean isExpectedStartObjectToken() { return currentToken() == JsonToken.START_OBJECT; }
+    public boolean isExpectedStartObjectToken() { return getCurrentToken() == JsonToken.START_OBJECT; }
     
     /*
     /**********************************************************
@@ -1285,7 +1285,7 @@ public abstract class JsonParser
      * may be thrown to indicate numeric overflow/underflow.
      */
     public boolean getBooleanValue() throws IOException {
-        JsonToken t = currentToken();
+        JsonToken t = getCurrentToken();
         if (t == JsonToken.VALUE_TRUE) return true;
         if (t == JsonToken.VALUE_FALSE) return false;
         throw new JsonParseException(this,
diff --git a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
index 2bb0165..bf68cd7 100644
--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
@@ -146,16 +146,11 @@ public class FilteringParserDelegate extends JsonParserDelegate
      */
 
     @Override public JsonToken getCurrentToken() { return _currToken; }
-    @Override public JsonToken currentToken() { return _currToken; }
 
     @Override public final int getCurrentTokenId() {
         final JsonToken t = _currToken;
         return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
     }
-    @Override public final int currentTokenId() {
-        final JsonToken t = _currToken;
-        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
-    }
 
     @Override public boolean hasCurrentToken() { return _currToken != null; }
     @Override public boolean hasTokenId(int id) {
diff --git a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
index 0c9c4eb..1100d61 100644
--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
@@ -25,14 +25,6 @@ public class JsonParserSequence extends JsonParserDelegate
      * Index of the next parser in {@link #_parsers}.
      */
     protected int _nextParser;
-
-    /**
-     * Flag used to indicate that `JsonParser.nextToken()` should not be called,
-     * due to parser already pointing to a token.
-     *
-     * @since 2.8
-     */
-    protected boolean _suppressNextToken;
     
     /*
      *******************************************************
@@ -43,7 +35,6 @@ public class JsonParserSequence extends JsonParserDelegate
     protected JsonParserSequence(JsonParser[] parsers)
     {
         super(parsers[0]);
-        _suppressNextToken = delegate.hasCurrentToken();
         _parsers = parsers;
         _nextParser = 1;
     }
@@ -103,21 +94,15 @@ public class JsonParserSequence extends JsonParserDelegate
     }
 
     @Override
-    public JsonToken nextToken() throws IOException
+    public JsonToken nextToken() throws IOException, JsonParseException
     {
-        if (delegate == null) {
-            return null;
-        }
-        if (_suppressNextToken) {
-            _suppressNextToken = false;
-            return delegate.currentToken();
-        }
         JsonToken t = delegate.nextToken();
-        while ((t == null) && switchToNext()) {
-            t = delegate.hasCurrentToken()
-                    ? delegate.currentToken() : delegate.nextToken();
+        if (t != null) return t;
+        while (switchToNext()) {
+            t = delegate.nextToken();
+            if (t != null) return t;
         }
-        return t;
+        return null;
     }
 
     /*
